define('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/advanced', function(require, exports, module) {

  'use strict';
  
  var optimizeProperties = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/properties/optimizer');
  
  var removeDuplicates = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/remove-duplicates');
  var mergeAdjacent = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/merge-adjacent');
  var reduceNonAdjacent = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/reduce-non-adjacent');
  var mergeNonAdjacentBySelector = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/merge-non-adjacent-by-selector');
  var mergeNonAdjacentByBody = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/merge-non-adjacent-by-body');
  var restructure = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/restructure');
  var removeDuplicateMediaQueries = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/remove-duplicate-media-queries');
  var mergeMediaQueries = require('html-webpack-plugin/node_modules/html-minifier/node_modules/clean-css/lib/selectors/merge-media-queries');
  
  function removeEmpty(tokens) {
    for (var i = 0, l = tokens.length; i < l; i++) {
      var token = tokens[i];
      var isEmpty = false;
  
      switch (token[0]) {
        case 'selector':
          isEmpty = token[1].length === 0 || token[2].length === 0;
          break;
        case 'block':
          removeEmpty(token[2]);
          isEmpty = token[2].length === 0;
      }
  
      if (isEmpty) {
        tokens.splice(i, 1);
        i--;
        l--;
      }
    }
  }
  
  function recursivelyOptimizeBlocks(tokens, options, context) {
    for (var i = 0, l = tokens.length; i < l; i++) {
      var token = tokens[i];
  
      if (token[0] == 'block') {
        var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0]);
        optimize(token[2], options, context, !isKeyframes);
      }
    }
  }
  
  function recursivelyOptimizeProperties(tokens, options, context) {
    for (var i = 0, l = tokens.length; i < l; i++) {
      var token = tokens[i];
  
      switch (token[0]) {
        case 'selector':
          optimizeProperties(token[1], token[2], false, true, options, context);
          break;
        case 'block':
          recursivelyOptimizeProperties(token[2], options, context);
      }
    }
  }
  
  function optimize(tokens, options, context, withRestructuring) {
    recursivelyOptimizeBlocks(tokens, options, context);
    recursivelyOptimizeProperties(tokens, options, context);
  
    removeDuplicates(tokens);
    mergeAdjacent(tokens, options, context);
    reduceNonAdjacent(tokens, options, context);
  
    mergeNonAdjacentBySelector(tokens, options, context);
    mergeNonAdjacentByBody(tokens, options);
  
    if (options.restructuring && withRestructuring) {
      restructure(tokens, options);
      mergeAdjacent(tokens, options, context);
    }
  
    if (options.mediaMerging) {
      removeDuplicateMediaQueries(tokens);
      var reduced = mergeMediaQueries(tokens);
      for (var i = reduced.length - 1; i >= 0; i--) {
        optimize(reduced[i][2], options, context, false);
      }
    }
  
    removeEmpty(tokens);
  }
  
  module.exports = optimize;

});
