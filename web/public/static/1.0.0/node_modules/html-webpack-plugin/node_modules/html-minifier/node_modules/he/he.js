define('html-webpack-plugin/node_modules/html-minifier/node_modules/he/he', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /*! https://mths.be/he v1.1.0 by @mathias | MIT license */
  'use strict';
  
  ;(function (root) {
  
  	// Detect free variables `exports`.
  	var freeExports = typeof exports == 'object' && exports;
  
  	// Detect free variable `module`.
  	var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
  
  	// Detect free variable `global`, from Node.js or Browserified code,
  	// and use it as `root`.
  	var freeGlobal = typeof global == 'object' && global;
  	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
  		root = freeGlobal;
  	}
  
  	/*--------------------------------------------------------------------------*/
  
  	// All astral symbols.
  	var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  	// All ASCII symbols (not just printable ASCII) except those listed in the
  	// first column of the overrides table.
  	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
  	var regexAsciiWhitelist = /[\x01-\x7F]/g;
  	// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
  	// code points listed in the first column of the overrides table on
  	// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
  	var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
  
  	var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
  	var encodeMap = { '\xAD': 'shy', '‌': 'zwnj', '‍': 'zwj', '‎': 'lrm', '⁣': 'ic', '⁢': 'it', '⁡': 'af', '‏': 'rlm', '​': 'ZeroWidthSpace', '⁠': 'NoBreak', '̑': 'DownBreve', '⃛': 'tdot', '⃜': 'DotDot', '\t': 'Tab', '\n': 'NewLine', ' ': 'puncsp', ' ': 'MediumSpace', ' ': 'thinsp', ' ': 'hairsp', ' ': 'emsp13', ' ': 'ensp', ' ': 'emsp14', ' ': 'emsp', ' ': 'numsp', '\xA0': 'nbsp', '  ': 'ThickSpace', '‾': 'oline', '_': 'lowbar', '‐': 'dash', '–': 'ndash', '—': 'mdash', '―': 'horbar', ',': 'comma', ';': 'semi', '⁏': 'bsemi', ':': 'colon', '⩴': 'Colone', '!': 'excl', '\xA1': 'iexcl', '?': 'quest', '\xBF': 'iquest', '.': 'period', '‥': 'nldr', '…': 'mldr', '\xB7': 'middot', '\'': 'apos', '‘': 'lsquo', '’': 'rsquo', '‚': 'sbquo', '‹': 'lsaquo', '›': 'rsaquo', '"': 'quot', '“': 'ldquo', '”': 'rdquo', '„': 'bdquo', '\xAB': 'laquo', '\xBB': 'raquo', '(': 'lpar', ')': 'rpar', '[': 'lsqb', ']': 'rsqb', '{': 'lcub', '}': 'rcub', '⌈': 'lceil', '⌉': 'rceil', '⌊': 'lfloor', '⌋': 'rfloor', '⦅': 'lopar', '⦆': 'ropar', '⦋': 'lbrke', '⦌': 'rbrke', '⦍': 'lbrkslu', '⦎': 'rbrksld', '⦏': 'lbrksld', '⦐': 'rbrkslu', '⦑': 'langd', '⦒': 'rangd', '⦓': 'lparlt', '⦔': 'rpargt', '⦕': 'gtlPar', '⦖': 'ltrPar', '⟦': 'lobrk', '⟧': 'robrk', '⟨': 'lang', '⟩': 'rang', '⟪': 'Lang', '⟫': 'Rang', '⟬': 'loang', '⟭': 'roang', '❲': 'lbbrk', '❳': 'rbbrk', '‖': 'Vert', '\xA7': 'sect', '\xB6': 'para', '@': 'commat', '*': 'ast', '/': 'sol', 'undefined': null, '&': 'amp', '#': 'num', '%': 'percnt', '‰': 'permil', '‱': 'pertenk', '†': 'dagger', '‡': 'Dagger', '•': 'bull', '⁃': 'hybull', '′': 'prime', '″': 'Prime', '‴': 'tprime', '⁗': 'qprime', '‵': 'bprime', '⁁': 'caret', '`': 'grave', '\xB4': 'acute', '˜': 'tilde', '^': 'Hat', '\xAF': 'macr', '˘': 'breve', '˙': 'dot', '\xA8': 'die', '˚': 'ring', '˝': 'dblac', '\xB8': 'cedil', '˛': 'ogon', 'ˆ': 'circ', 'ˇ': 'caron', '\xB0': 'deg', '\xA9': 'copy', '\xAE': 'reg', '℗': 'copysr', '℘': 'wp', '℞': 'rx', '℧': 'mho', '℩': 'iiota', '←': 'larr', '↚': 'nlarr', '→': 'rarr', '↛': 'nrarr', '↑': 'uarr', '↓': 'darr', '↔': 'harr', '↮': 'nharr', '↕': 'varr', '↖': 'nwarr', '↗': 'nearr', '↘': 'searr', '↙': 'swarr', '↝': 'rarrw', '↝̸': 'nrarrw', '↞': 'Larr', '↟': 'Uarr', '↠': 'Rarr', '↡': 'Darr', '↢': 'larrtl', '↣': 'rarrtl', '↤': 'mapstoleft', '↥': 'mapstoup', '↦': 'map', '↧': 'mapstodown', '↩': 'larrhk', '↪': 'rarrhk', '↫': 'larrlp', '↬': 'rarrlp', '↭': 'harrw', '↰': 'lsh', '↱': 'rsh', '↲': 'ldsh', '↳': 'rdsh', '↵': 'crarr', '↶': 'cularr', '↷': 'curarr', '↺': 'olarr', '↻': 'orarr', '↼': 'lharu', '↽': 'lhard', '↾': 'uharr', '↿': 'uharl', '⇀': 'rharu', '⇁': 'rhard', '⇂': 'dharr', '⇃': 'dharl', '⇄': 'rlarr', '⇅': 'udarr', '⇆': 'lrarr', '⇇': 'llarr', '⇈': 'uuarr', '⇉': 'rrarr', '⇊': 'ddarr', '⇋': 'lrhar', '⇌': 'rlhar', '⇐': 'lArr', '⇍': 'nlArr', '⇑': 'uArr', '⇒': 'rArr', '⇏': 'nrArr', '⇓': 'dArr', '⇔': 'iff', '⇎': 'nhArr', '⇕': 'vArr', '⇖': 'nwArr', '⇗': 'neArr', '⇘': 'seArr', '⇙': 'swArr', '⇚': 'lAarr', '⇛': 'rAarr', '⇝': 'zigrarr', '⇤': 'larrb', '⇥': 'rarrb', '⇵': 'duarr', '⇽': 'loarr', '⇾': 'roarr', '⇿': 'hoarr', '∀': 'forall', '∁': 'comp', '∂': 'part', '∂̸': 'npart', '∃': 'exist', '∄': 'nexist', '∅': 'empty', '∇': 'Del', '∈': 'in', '∉': 'notin', '∋': 'ni', '∌': 'notni', '϶': 'bepsi', '∏': 'prod', '∐': 'coprod', '∑': 'sum', '+': 'plus', '\xB1': 'pm', '\xF7': 'div', '\xD7': 'times', '<': 'lt', '≮': 'nlt', '<⃒': 'nvlt', '=': 'equals', '≠': 'ne', '=⃥': 'bne', '⩵': 'Equal', '>': 'gt', '≯': 'ngt', '>⃒': 'nvgt', '\xAC': 'not', '|': 'vert', '\xA6': 'brvbar', '−': 'minus', '∓': 'mp', '∔': 'plusdo', '⁄': 'frasl', '∖': 'setmn', '∗': 'lowast', '∘': 'compfn', '√': 'Sqrt', '∝': 'prop', '∞': 'infin', '∟': 'angrt', '∠': 'ang', '∠⃒': 'nang', '∡': 'angmsd', '∢': 'angsph', '∣': 'mid', '∤': 'nmid', '∥': 'par', '∦': 'npar', '∧': 'and', '∨': 'or', '∩': 'cap', '∩︀': 'caps', '∪': 'cup', '∪︀': 'cups', '∫': 'int', '∬': 'Int', '∭': 'tint', '⨌': 'qint', '∮': 'oint', '∯': 'Conint', '∰': 'Cconint', '∱': 'cwint', '∲': 'cwconint', '∳': 'awconint', '∴': 'there4', '∵': 'becaus', '∶': 'ratio', '∷': 'Colon', '∸': 'minusd', '∺': 'mDDot', '∻': 'homtht', '∼': 'sim', '≁': 'nsim', '∼⃒': 'nvsim', '∽': 'bsim', '∽̱': 'race', '∾': 'ac', '∾̳': 'acE', '∿': 'acd', '≀': 'wr', '≂': 'esim', '≂̸': 'nesim', '≃': 'sime', '≄': 'nsime', '≅': 'cong', '≇': 'ncong', '≆': 'simne', '≈': 'ap', '≉': 'nap', '≊': 'ape', '≋': 'apid', '≋̸': 'napid', '≌': 'bcong', '≍': 'CupCap', '≭': 'NotCupCap', '≍⃒': 'nvap', '≎': 'bump', '≎̸': 'nbump', '≏': 'bumpe', '≏̸': 'nbumpe', '≐': 'doteq', '≐̸': 'nedot', '≑': 'eDot', '≒': 'efDot', '≓': 'erDot', '≔': 'colone', '≕': 'ecolon', '≖': 'ecir', '≗': 'cire', '≙': 'wedgeq', '≚': 'veeeq', '≜': 'trie', '≟': 'equest', '≡': 'equiv', '≢': 'nequiv', '≡⃥': 'bnequiv', '≤': 'le', '≰': 'nle', '≤⃒': 'nvle', '≥': 'ge', '≱': 'nge', '≥⃒': 'nvge', '≦': 'lE', '≦̸': 'nlE', '≧': 'gE', '≧̸': 'ngE', '≨︀': 'lvnE', '≨': 'lnE', '≩': 'gnE', '≩︀': 'gvnE', '≪': 'll', '≪̸': 'nLtv', '≪⃒': 'nLt', '≫': 'gg', '≫̸': 'nGtv', '≫⃒': 'nGt', '≬': 'twixt', '≲': 'lsim', '≴': 'nlsim', '≳': 'gsim', '≵': 'ngsim', '≶': 'lg', '≸': 'ntlg', '≷': 'gl', '≹': 'ntgl', '≺': 'pr', '⊀': 'npr', '≻': 'sc', '⊁': 'nsc', '≼': 'prcue', '⋠': 'nprcue', '≽': 'sccue', '⋡': 'nsccue', '≾': 'prsim', '≿': 'scsim', '≿̸': 'NotSucceedsTilde', '⊂': 'sub', '⊄': 'nsub', '⊂⃒': 'vnsub', '⊃': 'sup', '⊅': 'nsup', '⊃⃒': 'vnsup', '⊆': 'sube', '⊈': 'nsube', '⊇': 'supe', '⊉': 'nsupe', '⊊︀': 'vsubne', '⊊': 'subne', '⊋︀': 'vsupne', '⊋': 'supne', '⊍': 'cupdot', '⊎': 'uplus', '⊏': 'sqsub', '⊏̸': 'NotSquareSubset', '⊐': 'sqsup', '⊐̸': 'NotSquareSuperset', '⊑': 'sqsube', '⋢': 'nsqsube', '⊒': 'sqsupe', '⋣': 'nsqsupe', '⊓': 'sqcap', '⊓︀': 'sqcaps', '⊔': 'sqcup', '⊔︀': 'sqcups', '⊕': 'oplus', '⊖': 'ominus', '⊗': 'otimes', '⊘': 'osol', '⊙': 'odot', '⊚': 'ocir', '⊛': 'oast', '⊝': 'odash', '⊞': 'plusb', '⊟': 'minusb', '⊠': 'timesb', '⊡': 'sdotb', '⊢': 'vdash', '⊬': 'nvdash', '⊣': 'dashv', '⊤': 'top', '⊥': 'bot', '⊧': 'models', '⊨': 'vDash', '⊭': 'nvDash', '⊩': 'Vdash', '⊮': 'nVdash', '⊪': 'Vvdash', '⊫': 'VDash', '⊯': 'nVDash', '⊰': 'prurel', '⊲': 'vltri', '⋪': 'nltri', '⊳': 'vrtri', '⋫': 'nrtri', '⊴': 'ltrie', '⋬': 'nltrie', '⊴⃒': 'nvltrie', '⊵': 'rtrie', '⋭': 'nrtrie', '⊵⃒': 'nvrtrie', '⊶': 'origof', '⊷': 'imof', '⊸': 'mumap', '⊹': 'hercon', '⊺': 'intcal', '⊻': 'veebar', '⊽': 'barvee', '⊾': 'angrtvb', '⊿': 'lrtri', '⋀': 'Wedge', '⋁': 'Vee', '⋂': 'xcap', '⋃': 'xcup', '⋄': 'diam', '⋅': 'sdot', '⋆': 'Star', '⋇': 'divonx', '⋈': 'bowtie', '⋉': 'ltimes', '⋊': 'rtimes', '⋋': 'lthree', '⋌': 'rthree', '⋍': 'bsime', '⋎': 'cuvee', '⋏': 'cuwed', '⋐': 'Sub', '⋑': 'Sup', '⋒': 'Cap', '⋓': 'Cup', '⋔': 'fork', '⋕': 'epar', '⋖': 'ltdot', '⋗': 'gtdot', '⋘': 'Ll', '⋘̸': 'nLl', '⋙': 'Gg', '⋙̸': 'nGg', '⋚︀': 'lesg', '⋚': 'leg', '⋛': 'gel', '⋛︀': 'gesl', '⋞': 'cuepr', '⋟': 'cuesc', '⋦': 'lnsim', '⋧': 'gnsim', '⋨': 'prnsim', '⋩': 'scnsim', '⋮': 'vellip', '⋯': 'ctdot', '⋰': 'utdot', '⋱': 'dtdot', '⋲': 'disin', '⋳': 'isinsv', '⋴': 'isins', '⋵': 'isindot', '⋵̸': 'notindot', '⋶': 'notinvc', '⋷': 'notinvb', '⋹': 'isinE', '⋹̸': 'notinE', '⋺': 'nisd', '⋻': 'xnis', '⋼': 'nis', '⋽': 'notnivc', '⋾': 'notnivb', '⌅': 'barwed', '⌆': 'Barwed', '⌌': 'drcrop', '⌍': 'dlcrop', '⌎': 'urcrop', '⌏': 'ulcrop', '⌐': 'bnot', '⌒': 'profline', '⌓': 'profsurf', '⌕': 'telrec', '⌖': 'target', '⌜': 'ulcorn', '⌝': 'urcorn', '⌞': 'dlcorn', '⌟': 'drcorn', '⌢': 'frown', '⌣': 'smile', '⌭': 'cylcty', '⌮': 'profalar', '⌶': 'topbot', '⌽': 'ovbar', '⌿': 'solbar', '⍼': 'angzarr', '⎰': 'lmoust', '⎱': 'rmoust', '⎴': 'tbrk', '⎵': 'bbrk', '⎶': 'bbrktbrk', '⏜': 'OverParenthesis', '⏝': 'UnderParenthesis', '⏞': 'OverBrace', '⏟': 'UnderBrace', '⏢': 'trpezium', '⏧': 'elinters', '␣': 'blank', '─': 'boxh', '│': 'boxv', '┌': 'boxdr', '┐': 'boxdl', '└': 'boxur', '┘': 'boxul', '├': 'boxvr', '┤': 'boxvl', '┬': 'boxhd', '┴': 'boxhu', '┼': 'boxvh', '═': 'boxH', '║': 'boxV', '╒': 'boxdR', '╓': 'boxDr', '╔': 'boxDR', '╕': 'boxdL', '╖': 'boxDl', '╗': 'boxDL', '╘': 'boxuR', '╙': 'boxUr', '╚': 'boxUR', '╛': 'boxuL', '╜': 'boxUl', '╝': 'boxUL', '╞': 'boxvR', '╟': 'boxVr', '╠': 'boxVR', '╡': 'boxvL', '╢': 'boxVl', '╣': 'boxVL', '╤': 'boxHd', '╥': 'boxhD', '╦': 'boxHD', '╧': 'boxHu', '╨': 'boxhU', '╩': 'boxHU', '╪': 'boxvH', '╫': 'boxVh', '╬': 'boxVH', '▀': 'uhblk', '▄': 'lhblk', '█': 'block', '░': 'blk14', '▒': 'blk12', '▓': 'blk34', '□': 'squ', '▪': 'squf', '▫': 'EmptyVerySmallSquare', '▭': 'rect', '▮': 'marker', '▱': 'fltns', '△': 'xutri', '▴': 'utrif', '▵': 'utri', '▸': 'rtrif', '▹': 'rtri', '▽': 'xdtri', '▾': 'dtrif', '▿': 'dtri', '◂': 'ltrif', '◃': 'ltri', '◊': 'loz', '○': 'cir', '◬': 'tridot', '◯': 'xcirc', '◸': 'ultri', '◹': 'urtri', '◺': 'lltri', '◻': 'EmptySmallSquare', '◼': 'FilledSmallSquare', '★': 'starf', '☆': 'star', '☎': 'phone', '♀': 'female', '♂': 'male', '♠': 'spades', '♣': 'clubs', '♥': 'hearts', '♦': 'diams', '♪': 'sung', '✓': 'check', '✗': 'cross', '✠': 'malt', '✶': 'sext', '❘': 'VerticalSeparator', '⟈': 'bsolhsub', '⟉': 'suphsol', '⟵': 'xlarr', '⟶': 'xrarr', '⟷': 'xharr', '⟸': 'xlArr', '⟹': 'xrArr', '⟺': 'xhArr', '⟼': 'xmap', '⟿': 'dzigrarr', '⤂': 'nvlArr', '⤃': 'nvrArr', '⤄': 'nvHarr', '⤅': 'Map', '⤌': 'lbarr', '⤍': 'rbarr', '⤎': 'lBarr', '⤏': 'rBarr', '⤐': 'RBarr', '⤑': 'DDotrahd', '⤒': 'UpArrowBar', '⤓': 'DownArrowBar', '⤖': 'Rarrtl', '⤙': 'latail', '⤚': 'ratail', '⤛': 'lAtail', '⤜': 'rAtail', '⤝': 'larrfs', '⤞': 'rarrfs', '⤟': 'larrbfs', '⤠': 'rarrbfs', '⤣': 'nwarhk', '⤤': 'nearhk', '⤥': 'searhk', '⤦': 'swarhk', '⤧': 'nwnear', '⤨': 'toea', '⤩': 'tosa', '⤪': 'swnwar', '⤳': 'rarrc', '⤳̸': 'nrarrc', '⤵': 'cudarrr', '⤶': 'ldca', '⤷': 'rdca', '⤸': 'cudarrl', '⤹': 'larrpl', '⤼': 'curarrm', '⤽': 'cularrp', '⥅': 'rarrpl', '⥈': 'harrcir', '⥉': 'Uarrocir', '⥊': 'lurdshar', '⥋': 'ldrushar', '⥎': 'LeftRightVector', '⥏': 'RightUpDownVector', '⥐': 'DownLeftRightVector', '⥑': 'LeftUpDownVector', '⥒': 'LeftVectorBar', '⥓': 'RightVectorBar', '⥔': 'RightUpVectorBar', '⥕': 'RightDownVectorBar', '⥖': 'DownLeftVectorBar', '⥗': 'DownRightVectorBar', '⥘': 'LeftUpVectorBar', '⥙': 'LeftDownVectorBar', '⥚': 'LeftTeeVector', '⥛': 'RightTeeVector', '⥜': 'RightUpTeeVector', '⥝': 'RightDownTeeVector', '⥞': 'DownLeftTeeVector', '⥟': 'DownRightTeeVector', '⥠': 'LeftUpTeeVector', '⥡': 'LeftDownTeeVector', '⥢': 'lHar', '⥣': 'uHar', '⥤': 'rHar', '⥥': 'dHar', '⥦': 'luruhar', '⥧': 'ldrdhar', '⥨': 'ruluhar', '⥩': 'rdldhar', '⥪': 'lharul', '⥫': 'llhard', '⥬': 'rharul', '⥭': 'lrhard', '⥮': 'udhar', '⥯': 'duhar', '⥰': 'RoundImplies', '⥱': 'erarr', '⥲': 'simrarr', '⥳': 'larrsim', '⥴': 'rarrsim', '⥵': 'rarrap', '⥶': 'ltlarr', '⥸': 'gtrarr', '⥹': 'subrarr', '⥻': 'suplarr', '⥼': 'lfisht', '⥽': 'rfisht', '⥾': 'ufisht', '⥿': 'dfisht', '⦚': 'vzigzag', '⦜': 'vangrt', '⦝': 'angrtvbd', '⦤': 'ange', '⦥': 'range', '⦦': 'dwangle', '⦧': 'uwangle', '⦨': 'angmsdaa', '⦩': 'angmsdab', '⦪': 'angmsdac', '⦫': 'angmsdad', '⦬': 'angmsdae', '⦭': 'angmsdaf', '⦮': 'angmsdag', '⦯': 'angmsdah', '⦰': 'bemptyv', '⦱': 'demptyv', '⦲': 'cemptyv', '⦳': 'raemptyv', '⦴': 'laemptyv', '⦵': 'ohbar', '⦶': 'omid', '⦷': 'opar', '⦹': 'operp', '⦻': 'olcross', '⦼': 'odsold', '⦾': 'olcir', '⦿': 'ofcir', '⧀': 'olt', '⧁': 'ogt', '⧂': 'cirscir', '⧃': 'cirE', '⧄': 'solb', '⧅': 'bsolb', '⧉': 'boxbox', '⧍': 'trisb', '⧎': 'rtriltri', '⧏': 'LeftTriangleBar', '⧏̸': 'NotLeftTriangleBar', '⧐': 'RightTriangleBar', '⧐̸': 'NotRightTriangleBar', '⧜': 'iinfin', '⧝': 'infintie', '⧞': 'nvinfin', '⧣': 'eparsl', '⧤': 'smeparsl', '⧥': 'eqvparsl', '⧫': 'lozf', '⧴': 'RuleDelayed', '⧶': 'dsol', '⨀': 'xodot', '⨁': 'xoplus', '⨂': 'xotime', '⨄': 'xuplus', '⨆': 'xsqcup', '⨍': 'fpartint', '⨐': 'cirfnint', '⨑': 'awint', '⨒': 'rppolint', '⨓': 'scpolint', '⨔': 'npolint', '⨕': 'pointint', '⨖': 'quatint', '⨗': 'intlarhk', '⨢': 'pluscir', '⨣': 'plusacir', '⨤': 'simplus', '⨥': 'plusdu', '⨦': 'plussim', '⨧': 'plustwo', '⨩': 'mcomma', '⨪': 'minusdu', '⨭': 'loplus', '⨮': 'roplus', '⨯': 'Cross', '⨰': 'timesd', '⨱': 'timesbar', '⨳': 'smashp', '⨴': 'lotimes', '⨵': 'rotimes', '⨶': 'otimesas', '⨷': 'Otimes', '⨸': 'odiv', '⨹': 'triplus', '⨺': 'triminus', '⨻': 'tritime', '⨼': 'iprod', '⨿': 'amalg', '⩀': 'capdot', '⩂': 'ncup', '⩃': 'ncap', '⩄': 'capand', '⩅': 'cupor', '⩆': 'cupcap', '⩇': 'capcup', '⩈': 'cupbrcap', '⩉': 'capbrcup', '⩊': 'cupcup', '⩋': 'capcap', '⩌': 'ccups', '⩍': 'ccaps', '⩐': 'ccupssm', '⩓': 'And', '⩔': 'Or', '⩕': 'andand', '⩖': 'oror', '⩗': 'orslope', '⩘': 'andslope', '⩚': 'andv', '⩛': 'orv', '⩜': 'andd', '⩝': 'ord', '⩟': 'wedbar', '⩦': 'sdote', '⩪': 'simdot', '⩭': 'congdot', '⩭̸': 'ncongdot', '⩮': 'easter', '⩯': 'apacir', '⩰': 'apE', '⩰̸': 'napE', '⩱': 'eplus', '⩲': 'pluse', '⩳': 'Esim', '⩷': 'eDDot', '⩸': 'equivDD', '⩹': 'ltcir', '⩺': 'gtcir', '⩻': 'ltquest', '⩼': 'gtquest', '⩽': 'les', '⩽̸': 'nles', '⩾': 'ges', '⩾̸': 'nges', '⩿': 'lesdot', '⪀': 'gesdot', '⪁': 'lesdoto', '⪂': 'gesdoto', '⪃': 'lesdotor', '⪄': 'gesdotol', '⪅': 'lap', '⪆': 'gap', '⪇': 'lne', '⪈': 'gne', '⪉': 'lnap', '⪊': 'gnap', '⪋': 'lEg', '⪌': 'gEl', '⪍': 'lsime', '⪎': 'gsime', '⪏': 'lsimg', '⪐': 'gsiml', '⪑': 'lgE', '⪒': 'glE', '⪓': 'lesges', '⪔': 'gesles', '⪕': 'els', '⪖': 'egs', '⪗': 'elsdot', '⪘': 'egsdot', '⪙': 'el', '⪚': 'eg', '⪝': 'siml', '⪞': 'simg', '⪟': 'simlE', '⪠': 'simgE', '⪡': 'LessLess', '⪡̸': 'NotNestedLessLess', '⪢': 'GreaterGreater', '⪢̸': 'NotNestedGreaterGreater', '⪤': 'glj', '⪥': 'gla', '⪦': 'ltcc', '⪧': 'gtcc', '⪨': 'lescc', '⪩': 'gescc', '⪪': 'smt', '⪫': 'lat', '⪬': 'smte', '⪬︀': 'smtes', '⪭': 'late', '⪭︀': 'lates', '⪮': 'bumpE', '⪯': 'pre', '⪯̸': 'npre', '⪰': 'sce', '⪰̸': 'nsce', '⪳': 'prE', '⪴': 'scE', '⪵': 'prnE', '⪶': 'scnE', '⪷': 'prap', '⪸': 'scap', '⪹': 'prnap', '⪺': 'scnap', '⪻': 'Pr', '⪼': 'Sc', '⪽': 'subdot', '⪾': 'supdot', '⪿': 'subplus', '⫀': 'supplus', '⫁': 'submult', '⫂': 'supmult', '⫃': 'subedot', '⫄': 'supedot', '⫅': 'subE', '⫅̸': 'nsubE', '⫆': 'supE', '⫆̸': 'nsupE', '⫇': 'subsim', '⫈': 'supsim', '⫋︀': 'vsubnE', '⫋': 'subnE', '⫌︀': 'vsupnE', '⫌': 'supnE', '⫏': 'csub', '⫐': 'csup', '⫑': 'csube', '⫒': 'csupe', '⫓': 'subsup', '⫔': 'supsub', '⫕': 'subsub', '⫖': 'supsup', '⫗': 'suphsub', '⫘': 'supdsub', '⫙': 'forkv', '⫚': 'topfork', '⫛': 'mlcp', '⫤': 'Dashv', '⫦': 'Vdashl', '⫧': 'Barv', '⫨': 'vBar', '⫩': 'vBarv', '⫫': 'Vbar', '⫬': 'Not', '⫭': 'bNot', '⫮': 'rnmid', '⫯': 'cirmid', '⫰': 'midcir', '⫱': 'topcir', '⫲': 'nhpar', '⫳': 'parsim', '⫽': 'parsl', '⫽⃥': 'nparsl', '♭': 'flat', '♮': 'natur', '♯': 'sharp', '\xA4': 'curren', '\xA2': 'cent', '$': 'dollar', '\xA3': 'pound', '\xA5': 'yen', '€': 'euro', '\xB9': 'sup1', '\xBD': 'half', '⅓': 'frac13', '\xBC': 'frac14', '⅕': 'frac15', '⅙': 'frac16', '⅛': 'frac18', '\xB2': 'sup2', '⅔': 'frac23', '⅖': 'frac25', '\xB3': 'sup3', '\xBE': 'frac34', '⅗': 'frac35', '⅜': 'frac38', '⅘': 'frac45', '⅚': 'frac56', '⅝': 'frac58', '⅞': 'frac78', '𝒶': 'ascr', '𝕒': 'aopf', '𝔞': 'afr', '𝔸': 'Aopf', '𝔄': 'Afr', '𝒜': 'Ascr', '\xAA': 'ordf', '\xE1': 'aacute', '\xC1': 'Aacute', '\xE0': 'agrave', '\xC0': 'Agrave', 'ă': 'abreve', 'Ă': 'Abreve', '\xE2': 'acirc', '\xC2': 'Acirc', '\xE5': 'aring', '\xC5': 'angst', '\xE4': 'auml', '\xC4': 'Auml', '\xE3': 'atilde', '\xC3': 'Atilde', 'ą': 'aogon', 'Ą': 'Aogon', 'ā': 'amacr', 'Ā': 'Amacr', '\xE6': 'aelig', '\xC6': 'AElig', '𝒷': 'bscr', '𝕓': 'bopf', '𝔟': 'bfr', '𝔹': 'Bopf', 'ℬ': 'Bscr', '𝔅': 'Bfr', '𝔠': 'cfr', '𝒸': 'cscr', '𝕔': 'copf', 'ℭ': 'Cfr', '𝒞': 'Cscr', 'ℂ': 'Copf', 'ć': 'cacute', 'Ć': 'Cacute', 'ĉ': 'ccirc', 'Ĉ': 'Ccirc', 'č': 'ccaron', 'Č': 'Ccaron', 'ċ': 'cdot', 'Ċ': 'Cdot', '\xE7': 'ccedil', '\xC7': 'Ccedil', '℅': 'incare', '𝔡': 'dfr', 'ⅆ': 'dd', '𝕕': 'dopf', '𝒹': 'dscr', '𝒟': 'Dscr', '𝔇': 'Dfr', 'ⅅ': 'DD', '𝔻': 'Dopf', 'ď': 'dcaron', 'Ď': 'Dcaron', 'đ': 'dstrok', 'Đ': 'Dstrok', '\xF0': 'eth', '\xD0': 'ETH', 'ⅇ': 'ee', 'ℯ': 'escr', '𝔢': 'efr', '𝕖': 'eopf', 'ℰ': 'Escr', '𝔈': 'Efr', '𝔼': 'Eopf', '\xE9': 'eacute', '\xC9': 'Eacute', '\xE8': 'egrave', '\xC8': 'Egrave', '\xEA': 'ecirc', '\xCA': 'Ecirc', 'ě': 'ecaron', 'Ě': 'Ecaron', '\xEB': 'euml', '\xCB': 'Euml', 'ė': 'edot', 'Ė': 'Edot', 'ę': 'eogon', 'Ę': 'Eogon', 'ē': 'emacr', 'Ē': 'Emacr', '𝔣': 'ffr', '𝕗': 'fopf', '𝒻': 'fscr', '𝔉': 'Ffr', '𝔽': 'Fopf', 'ℱ': 'Fscr', 'ﬀ': 'fflig', 'ﬃ': 'ffilig', 'ﬄ': 'ffllig', 'ﬁ': 'filig', 'fj': 'fjlig', 'ﬂ': 'fllig', 'ƒ': 'fnof', 'ℊ': 'gscr', '𝕘': 'gopf', '𝔤': 'gfr', '𝒢': 'Gscr', '𝔾': 'Gopf', '𝔊': 'Gfr', 'ǵ': 'gacute', 'ğ': 'gbreve', 'Ğ': 'Gbreve', 'ĝ': 'gcirc', 'Ĝ': 'Gcirc', 'ġ': 'gdot', 'Ġ': 'Gdot', 'Ģ': 'Gcedil', '𝔥': 'hfr', 'ℎ': 'planckh', '𝒽': 'hscr', '𝕙': 'hopf', 'ℋ': 'Hscr', 'ℌ': 'Hfr', 'ℍ': 'Hopf', 'ĥ': 'hcirc', 'Ĥ': 'Hcirc', 'ℏ': 'hbar', 'ħ': 'hstrok', 'Ħ': 'Hstrok', '𝕚': 'iopf', '𝔦': 'ifr', '𝒾': 'iscr', 'ⅈ': 'ii', '𝕀': 'Iopf', 'ℐ': 'Iscr', 'ℑ': 'Im', '\xED': 'iacute', '\xCD': 'Iacute', '\xEC': 'igrave', '\xCC': 'Igrave', '\xEE': 'icirc', '\xCE': 'Icirc', '\xEF': 'iuml', '\xCF': 'Iuml', 'ĩ': 'itilde', 'Ĩ': 'Itilde', 'İ': 'Idot', 'į': 'iogon', 'Į': 'Iogon', 'ī': 'imacr', 'Ī': 'Imacr', 'ĳ': 'ijlig', 'Ĳ': 'IJlig', 'ı': 'imath', '𝒿': 'jscr', '𝕛': 'jopf', '𝔧': 'jfr', '𝒥': 'Jscr', '𝔍': 'Jfr', '𝕁': 'Jopf', 'ĵ': 'jcirc', 'Ĵ': 'Jcirc', 'ȷ': 'jmath', '𝕜': 'kopf', '𝓀': 'kscr', '𝔨': 'kfr', '𝒦': 'Kscr', '𝕂': 'Kopf', '𝔎': 'Kfr', 'ķ': 'kcedil', 'Ķ': 'Kcedil', '𝔩': 'lfr', '𝓁': 'lscr', 'ℓ': 'ell', '𝕝': 'lopf', 'ℒ': 'Lscr', '𝔏': 'Lfr', '𝕃': 'Lopf', 'ĺ': 'lacute', 'Ĺ': 'Lacute', 'ľ': 'lcaron', 'Ľ': 'Lcaron', 'ļ': 'lcedil', 'Ļ': 'Lcedil', 'ł': 'lstrok', 'Ł': 'Lstrok', 'ŀ': 'lmidot', 'Ŀ': 'Lmidot', '𝔪': 'mfr', '𝕞': 'mopf', '𝓂': 'mscr', '𝔐': 'Mfr', '𝕄': 'Mopf', 'ℳ': 'Mscr', '𝔫': 'nfr', '𝕟': 'nopf', '𝓃': 'nscr', 'ℕ': 'Nopf', '𝒩': 'Nscr', '𝔑': 'Nfr', 'ń': 'nacute', 'Ń': 'Nacute', 'ň': 'ncaron', 'Ň': 'Ncaron', '\xF1': 'ntilde', '\xD1': 'Ntilde', 'ņ': 'ncedil', 'Ņ': 'Ncedil', '№': 'numero', 'ŋ': 'eng', 'Ŋ': 'ENG', '𝕠': 'oopf', '𝔬': 'ofr', 'ℴ': 'oscr', '𝒪': 'Oscr', '𝔒': 'Ofr', '𝕆': 'Oopf', '\xBA': 'ordm', '\xF3': 'oacute', '\xD3': 'Oacute', '\xF2': 'ograve', '\xD2': 'Ograve', '\xF4': 'ocirc', '\xD4': 'Ocirc', '\xF6': 'ouml', '\xD6': 'Ouml', 'ő': 'odblac', 'Ő': 'Odblac', '\xF5': 'otilde', '\xD5': 'Otilde', '\xF8': 'oslash', '\xD8': 'Oslash', 'ō': 'omacr', 'Ō': 'Omacr', 'œ': 'oelig', 'Œ': 'OElig', '𝔭': 'pfr', '𝓅': 'pscr', '𝕡': 'popf', 'ℙ': 'Popf', '𝔓': 'Pfr', '𝒫': 'Pscr', '𝕢': 'qopf', '𝔮': 'qfr', '𝓆': 'qscr', '𝒬': 'Qscr', '𝔔': 'Qfr', 'ℚ': 'Qopf', 'ĸ': 'kgreen', '𝔯': 'rfr', '𝕣': 'ropf', '𝓇': 'rscr', 'ℛ': 'Rscr', 'ℜ': 'Re', 'ℝ': 'Ropf', 'ŕ': 'racute', 'Ŕ': 'Racute', 'ř': 'rcaron', 'Ř': 'Rcaron', 'ŗ': 'rcedil', 'Ŗ': 'Rcedil', '𝕤': 'sopf', '𝓈': 'sscr', '𝔰': 'sfr', '𝕊': 'Sopf', '𝔖': 'Sfr', '𝒮': 'Sscr', 'Ⓢ': 'oS', 'ś': 'sacute', 'Ś': 'Sacute', 'ŝ': 'scirc', 'Ŝ': 'Scirc', 'š': 'scaron', 'Š': 'Scaron', 'ş': 'scedil', 'Ş': 'Scedil', '\xDF': 'szlig', '𝔱': 'tfr', '𝓉': 'tscr', '𝕥': 'topf', '𝒯': 'Tscr', '𝔗': 'Tfr', '𝕋': 'Topf', 'ť': 'tcaron', 'Ť': 'Tcaron', 'ţ': 'tcedil', 'Ţ': 'Tcedil', '™': 'trade', 'ŧ': 'tstrok', 'Ŧ': 'Tstrok', '𝓊': 'uscr', '𝕦': 'uopf', '𝔲': 'ufr', '𝕌': 'Uopf', '𝔘': 'Ufr', '𝒰': 'Uscr', '\xFA': 'uacute', '\xDA': 'Uacute', '\xF9': 'ugrave', '\xD9': 'Ugrave', 'ŭ': 'ubreve', 'Ŭ': 'Ubreve', '\xFB': 'ucirc', '\xDB': 'Ucirc', 'ů': 'uring', 'Ů': 'Uring', '\xFC': 'uuml', '\xDC': 'Uuml', 'ű': 'udblac', 'Ű': 'Udblac', 'ũ': 'utilde', 'Ũ': 'Utilde', 'ų': 'uogon', 'Ų': 'Uogon', 'ū': 'umacr', 'Ū': 'Umacr', '𝔳': 'vfr', '𝕧': 'vopf', '𝓋': 'vscr', '𝔙': 'Vfr', '𝕍': 'Vopf', '𝒱': 'Vscr', '𝕨': 'wopf', '𝓌': 'wscr', '𝔴': 'wfr', '𝒲': 'Wscr', '𝕎': 'Wopf', '𝔚': 'Wfr', 'ŵ': 'wcirc', 'Ŵ': 'Wcirc', '𝔵': 'xfr', '𝓍': 'xscr', '𝕩': 'xopf', '𝕏': 'Xopf', '𝔛': 'Xfr', '𝒳': 'Xscr', '𝔶': 'yfr', '𝓎': 'yscr', '𝕪': 'yopf', '𝒴': 'Yscr', '𝔜': 'Yfr', '𝕐': 'Yopf', '\xFD': 'yacute', '\xDD': 'Yacute', 'ŷ': 'ycirc', 'Ŷ': 'Ycirc', '\xFF': 'yuml', 'Ÿ': 'Yuml', '𝓏': 'zscr', '𝔷': 'zfr', '𝕫': 'zopf', 'ℨ': 'Zfr', 'ℤ': 'Zopf', '𝒵': 'Zscr', 'ź': 'zacute', 'Ź': 'Zacute', 'ž': 'zcaron', 'Ž': 'Zcaron', 'ż': 'zdot', 'Ż': 'Zdot', 'Ƶ': 'imped', '\xFE': 'thorn', '\xDE': 'THORN', 'ŉ': 'napos', 'α': 'alpha', 'Α': 'Alpha', 'β': 'beta', 'Β': 'Beta', 'γ': 'gamma', 'Γ': 'Gamma', 'δ': 'delta', 'Δ': 'Delta', 'ε': 'epsi', 'ϵ': 'epsiv', 'Ε': 'Epsilon', 'ϝ': 'gammad', 'Ϝ': 'Gammad', 'ζ': 'zeta', 'Ζ': 'Zeta', 'η': 'eta', 'Η': 'Eta', 'θ': 'theta', 'ϑ': 'thetav', 'Θ': 'Theta', 'ι': 'iota', 'Ι': 'Iota', 'κ': 'kappa', 'ϰ': 'kappav', 'Κ': 'Kappa', 'λ': 'lambda', 'Λ': 'Lambda', 'μ': 'mu', '\xB5': 'micro', 'Μ': 'Mu', 'ν': 'nu', 'Ν': 'Nu', 'ξ': 'xi', 'Ξ': 'Xi', 'ο': 'omicron', 'Ο': 'Omicron', 'π': 'pi', 'ϖ': 'piv', 'Π': 'Pi', 'ρ': 'rho', 'ϱ': 'rhov', 'Ρ': 'Rho', 'σ': 'sigma', 'Σ': 'Sigma', 'ς': 'sigmaf', 'τ': 'tau', 'Τ': 'Tau', 'υ': 'upsi', 'Υ': 'Upsilon', 'ϒ': 'Upsi', 'φ': 'phi', 'ϕ': 'phiv', 'Φ': 'Phi', 'χ': 'chi', 'Χ': 'Chi', 'ψ': 'psi', 'Ψ': 'Psi', 'ω': 'omega', 'Ω': 'ohm', 'а': 'acy', 'А': 'Acy', 'б': 'bcy', 'Б': 'Bcy', 'в': 'vcy', 'В': 'Vcy', 'г': 'gcy', 'Г': 'Gcy', 'ѓ': 'gjcy', 'Ѓ': 'GJcy', 'д': 'dcy', 'Д': 'Dcy', 'ђ': 'djcy', 'Ђ': 'DJcy', 'е': 'iecy', 'Е': 'IEcy', 'ё': 'iocy', 'Ё': 'IOcy', 'є': 'jukcy', 'Є': 'Jukcy', 'ж': 'zhcy', 'Ж': 'ZHcy', 'з': 'zcy', 'З': 'Zcy', 'ѕ': 'dscy', 'Ѕ': 'DScy', 'и': 'icy', 'И': 'Icy', 'і': 'iukcy', 'І': 'Iukcy', 'ї': 'yicy', 'Ї': 'YIcy', 'й': 'jcy', 'Й': 'Jcy', 'ј': 'jsercy', 'Ј': 'Jsercy', 'к': 'kcy', 'К': 'Kcy', 'ќ': 'kjcy', 'Ќ': 'KJcy', 'л': 'lcy', 'Л': 'Lcy', 'љ': 'ljcy', 'Љ': 'LJcy', 'м': 'mcy', 'М': 'Mcy', 'н': 'ncy', 'Н': 'Ncy', 'њ': 'njcy', 'Њ': 'NJcy', 'о': 'ocy', 'О': 'Ocy', 'п': 'pcy', 'П': 'Pcy', 'р': 'rcy', 'Р': 'Rcy', 'с': 'scy', 'С': 'Scy', 'т': 'tcy', 'Т': 'Tcy', 'ћ': 'tshcy', 'Ћ': 'TSHcy', 'у': 'ucy', 'У': 'Ucy', 'ў': 'ubrcy', 'Ў': 'Ubrcy', 'ф': 'fcy', 'Ф': 'Fcy', 'х': 'khcy', 'Х': 'KHcy', 'ц': 'tscy', 'Ц': 'TScy', 'ч': 'chcy', 'Ч': 'CHcy', 'џ': 'dzcy', 'Џ': 'DZcy', 'ш': 'shcy', 'Ш': 'SHcy', 'щ': 'shchcy', 'Щ': 'SHCHcy', 'ъ': 'hardcy', 'Ъ': 'HARDcy', 'ы': 'ycy', 'Ы': 'Ycy', 'ь': 'softcy', 'Ь': 'SOFTcy', 'э': 'ecy', 'Э': 'Ecy', 'ю': 'yucy', 'Ю': 'YUcy', 'я': 'yacy', 'Я': 'YAcy', 'ℵ': 'aleph', 'ℶ': 'beth', 'ℷ': 'gimel', 'ℸ': 'daleth' };
  
  	var regexEscape = /["&'<>`]/g;
  	var escapeMap = {
  		'"': '&quot;',
  		'&': '&amp;',
  		'\'': '&#x27;',
  		'<': '&lt;',
  		// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
  		// following is not strictly necessary unless it’s part of a tag or an
  		// unquoted attribute value. We’re only escaping it to support those
  		// situations, and for XML support.
  		'>': '&gt;',
  		// In Internet Explorer ≤ 8, the backtick character can be used
  		// to break out of (un)quoted attribute values or HTML comments.
  		// See http://html5sec.org/#102, http://html5sec.org/#108, and
  		// http://html5sec.org/#133.
  		'`': '&#x60;'
  	};
  
  	var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
  	var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  	var regexDecode = /&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)([=a-zA-Z0-9])?/g;
  	var decodeMap = { 'aacute': '\xE1', 'Aacute': '\xC1', 'abreve': 'ă', 'Abreve': 'Ă', 'ac': '∾', 'acd': '∿', 'acE': '∾̳', 'acirc': '\xE2', 'Acirc': '\xC2', 'acute': '\xB4', 'acy': 'а', 'Acy': 'А', 'aelig': '\xE6', 'AElig': '\xC6', 'af': '⁡', 'afr': '𝔞', 'Afr': '𝔄', 'agrave': '\xE0', 'Agrave': '\xC0', 'alefsym': 'ℵ', 'aleph': 'ℵ', 'alpha': 'α', 'Alpha': 'Α', 'amacr': 'ā', 'Amacr': 'Ā', 'amalg': '⨿', 'amp': '&', 'AMP': '&', 'and': '∧', 'And': '⩓', 'andand': '⩕', 'andd': '⩜', 'andslope': '⩘', 'andv': '⩚', 'ang': '∠', 'ange': '⦤', 'angle': '∠', 'angmsd': '∡', 'angmsdaa': '⦨', 'angmsdab': '⦩', 'angmsdac': '⦪', 'angmsdad': '⦫', 'angmsdae': '⦬', 'angmsdaf': '⦭', 'angmsdag': '⦮', 'angmsdah': '⦯', 'angrt': '∟', 'angrtvb': '⊾', 'angrtvbd': '⦝', 'angsph': '∢', 'angst': '\xC5', 'angzarr': '⍼', 'aogon': 'ą', 'Aogon': 'Ą', 'aopf': '𝕒', 'Aopf': '𝔸', 'ap': '≈', 'apacir': '⩯', 'ape': '≊', 'apE': '⩰', 'apid': '≋', 'apos': '\'', 'ApplyFunction': '⁡', 'approx': '≈', 'approxeq': '≊', 'aring': '\xE5', 'Aring': '\xC5', 'ascr': '𝒶', 'Ascr': '𝒜', 'Assign': '≔', 'ast': '*', 'asymp': '≈', 'asympeq': '≍', 'atilde': '\xE3', 'Atilde': '\xC3', 'auml': '\xE4', 'Auml': '\xC4', 'awconint': '∳', 'awint': '⨑', 'backcong': '≌', 'backepsilon': '϶', 'backprime': '‵', 'backsim': '∽', 'backsimeq': '⋍', 'Backslash': '∖', 'Barv': '⫧', 'barvee': '⊽', 'barwed': '⌅', 'Barwed': '⌆', 'barwedge': '⌅', 'bbrk': '⎵', 'bbrktbrk': '⎶', 'bcong': '≌', 'bcy': 'б', 'Bcy': 'Б', 'bdquo': '„', 'becaus': '∵', 'because': '∵', 'Because': '∵', 'bemptyv': '⦰', 'bepsi': '϶', 'bernou': 'ℬ', 'Bernoullis': 'ℬ', 'beta': 'β', 'Beta': 'Β', 'beth': 'ℶ', 'between': '≬', 'bfr': '𝔟', 'Bfr': '𝔅', 'bigcap': '⋂', 'bigcirc': '◯', 'bigcup': '⋃', 'bigodot': '⨀', 'bigoplus': '⨁', 'bigotimes': '⨂', 'bigsqcup': '⨆', 'bigstar': '★', 'bigtriangledown': '▽', 'bigtriangleup': '△', 'biguplus': '⨄', 'bigvee': '⋁', 'bigwedge': '⋀', 'bkarow': '⤍', 'blacklozenge': '⧫', 'blacksquare': '▪', 'blacktriangle': '▴', 'blacktriangledown': '▾', 'blacktriangleleft': '◂', 'blacktriangleright': '▸', 'blank': '␣', 'blk12': '▒', 'blk14': '░', 'blk34': '▓', 'block': '█', 'bne': '=⃥', 'bnequiv': '≡⃥', 'bnot': '⌐', 'bNot': '⫭', 'bopf': '𝕓', 'Bopf': '𝔹', 'bot': '⊥', 'bottom': '⊥', 'bowtie': '⋈', 'boxbox': '⧉', 'boxdl': '┐', 'boxdL': '╕', 'boxDl': '╖', 'boxDL': '╗', 'boxdr': '┌', 'boxdR': '╒', 'boxDr': '╓', 'boxDR': '╔', 'boxh': '─', 'boxH': '═', 'boxhd': '┬', 'boxhD': '╥', 'boxHd': '╤', 'boxHD': '╦', 'boxhu': '┴', 'boxhU': '╨', 'boxHu': '╧', 'boxHU': '╩', 'boxminus': '⊟', 'boxplus': '⊞', 'boxtimes': '⊠', 'boxul': '┘', 'boxuL': '╛', 'boxUl': '╜', 'boxUL': '╝', 'boxur': '└', 'boxuR': '╘', 'boxUr': '╙', 'boxUR': '╚', 'boxv': '│', 'boxV': '║', 'boxvh': '┼', 'boxvH': '╪', 'boxVh': '╫', 'boxVH': '╬', 'boxvl': '┤', 'boxvL': '╡', 'boxVl': '╢', 'boxVL': '╣', 'boxvr': '├', 'boxvR': '╞', 'boxVr': '╟', 'boxVR': '╠', 'bprime': '‵', 'breve': '˘', 'Breve': '˘', 'brvbar': '\xA6', 'bscr': '𝒷', 'Bscr': 'ℬ', 'bsemi': '⁏', 'bsim': '∽', 'bsime': '⋍', 'bsol': '\\', 'bsolb': '⧅', 'bsolhsub': '⟈', 'bull': '•', 'bullet': '•', 'bump': '≎', 'bumpe': '≏', 'bumpE': '⪮', 'bumpeq': '≏', 'Bumpeq': '≎', 'cacute': 'ć', 'Cacute': 'Ć', 'cap': '∩', 'Cap': '⋒', 'capand': '⩄', 'capbrcup': '⩉', 'capcap': '⩋', 'capcup': '⩇', 'capdot': '⩀', 'CapitalDifferentialD': 'ⅅ', 'caps': '∩︀', 'caret': '⁁', 'caron': 'ˇ', 'Cayleys': 'ℭ', 'ccaps': '⩍', 'ccaron': 'č', 'Ccaron': 'Č', 'ccedil': '\xE7', 'Ccedil': '\xC7', 'ccirc': 'ĉ', 'Ccirc': 'Ĉ', 'Cconint': '∰', 'ccups': '⩌', 'ccupssm': '⩐', 'cdot': 'ċ', 'Cdot': 'Ċ', 'cedil': '\xB8', 'Cedilla': '\xB8', 'cemptyv': '⦲', 'cent': '\xA2', 'centerdot': '\xB7', 'CenterDot': '\xB7', 'cfr': '𝔠', 'Cfr': 'ℭ', 'chcy': 'ч', 'CHcy': 'Ч', 'check': '✓', 'checkmark': '✓', 'chi': 'χ', 'Chi': 'Χ', 'cir': '○', 'circ': 'ˆ', 'circeq': '≗', 'circlearrowleft': '↺', 'circlearrowright': '↻', 'circledast': '⊛', 'circledcirc': '⊚', 'circleddash': '⊝', 'CircleDot': '⊙', 'circledR': '\xAE', 'circledS': 'Ⓢ', 'CircleMinus': '⊖', 'CirclePlus': '⊕', 'CircleTimes': '⊗', 'cire': '≗', 'cirE': '⧃', 'cirfnint': '⨐', 'cirmid': '⫯', 'cirscir': '⧂', 'ClockwiseContourIntegral': '∲', 'CloseCurlyDoubleQuote': '”', 'CloseCurlyQuote': '’', 'clubs': '♣', 'clubsuit': '♣', 'colon': ':', 'Colon': '∷', 'colone': '≔', 'Colone': '⩴', 'coloneq': '≔', 'comma': ',', 'commat': '@', 'comp': '∁', 'compfn': '∘', 'complement': '∁', 'complexes': 'ℂ', 'cong': '≅', 'congdot': '⩭', 'Congruent': '≡', 'conint': '∮', 'Conint': '∯', 'ContourIntegral': '∮', 'copf': '𝕔', 'Copf': 'ℂ', 'coprod': '∐', 'Coproduct': '∐', 'copy': '\xA9', 'COPY': '\xA9', 'copysr': '℗', 'CounterClockwiseContourIntegral': '∳', 'crarr': '↵', 'cross': '✗', 'Cross': '⨯', 'cscr': '𝒸', 'Cscr': '𝒞', 'csub': '⫏', 'csube': '⫑', 'csup': '⫐', 'csupe': '⫒', 'ctdot': '⋯', 'cudarrl': '⤸', 'cudarrr': '⤵', 'cuepr': '⋞', 'cuesc': '⋟', 'cularr': '↶', 'cularrp': '⤽', 'cup': '∪', 'Cup': '⋓', 'cupbrcap': '⩈', 'cupcap': '⩆', 'CupCap': '≍', 'cupcup': '⩊', 'cupdot': '⊍', 'cupor': '⩅', 'cups': '∪︀', 'curarr': '↷', 'curarrm': '⤼', 'curlyeqprec': '⋞', 'curlyeqsucc': '⋟', 'curlyvee': '⋎', 'curlywedge': '⋏', 'curren': '\xA4', 'curvearrowleft': '↶', 'curvearrowright': '↷', 'cuvee': '⋎', 'cuwed': '⋏', 'cwconint': '∲', 'cwint': '∱', 'cylcty': '⌭', 'dagger': '†', 'Dagger': '‡', 'daleth': 'ℸ', 'darr': '↓', 'dArr': '⇓', 'Darr': '↡', 'dash': '‐', 'dashv': '⊣', 'Dashv': '⫤', 'dbkarow': '⤏', 'dblac': '˝', 'dcaron': 'ď', 'Dcaron': 'Ď', 'dcy': 'д', 'Dcy': 'Д', 'dd': 'ⅆ', 'DD': 'ⅅ', 'ddagger': '‡', 'ddarr': '⇊', 'DDotrahd': '⤑', 'ddotseq': '⩷', 'deg': '\xB0', 'Del': '∇', 'delta': 'δ', 'Delta': 'Δ', 'demptyv': '⦱', 'dfisht': '⥿', 'dfr': '𝔡', 'Dfr': '𝔇', 'dHar': '⥥', 'dharl': '⇃', 'dharr': '⇂', 'DiacriticalAcute': '\xB4', 'DiacriticalDot': '˙', 'DiacriticalDoubleAcute': '˝', 'DiacriticalGrave': '`', 'DiacriticalTilde': '˜', 'diam': '⋄', 'diamond': '⋄', 'Diamond': '⋄', 'diamondsuit': '♦', 'diams': '♦', 'die': '\xA8', 'DifferentialD': 'ⅆ', 'digamma': 'ϝ', 'disin': '⋲', 'div': '\xF7', 'divide': '\xF7', 'divideontimes': '⋇', 'divonx': '⋇', 'djcy': 'ђ', 'DJcy': 'Ђ', 'dlcorn': '⌞', 'dlcrop': '⌍', 'dollar': '$', 'dopf': '𝕕', 'Dopf': '𝔻', 'dot': '˙', 'Dot': '\xA8', 'DotDot': '⃜', 'doteq': '≐', 'doteqdot': '≑', 'DotEqual': '≐', 'dotminus': '∸', 'dotplus': '∔', 'dotsquare': '⊡', 'doublebarwedge': '⌆', 'DoubleContourIntegral': '∯', 'DoubleDot': '\xA8', 'DoubleDownArrow': '⇓', 'DoubleLeftArrow': '⇐', 'DoubleLeftRightArrow': '⇔', 'DoubleLeftTee': '⫤', 'DoubleLongLeftArrow': '⟸', 'DoubleLongLeftRightArrow': '⟺', 'DoubleLongRightArrow': '⟹', 'DoubleRightArrow': '⇒', 'DoubleRightTee': '⊨', 'DoubleUpArrow': '⇑', 'DoubleUpDownArrow': '⇕', 'DoubleVerticalBar': '∥', 'downarrow': '↓', 'Downarrow': '⇓', 'DownArrow': '↓', 'DownArrowBar': '⤓', 'DownArrowUpArrow': '⇵', 'DownBreve': '̑', 'downdownarrows': '⇊', 'downharpoonleft': '⇃', 'downharpoonright': '⇂', 'DownLeftRightVector': '⥐', 'DownLeftTeeVector': '⥞', 'DownLeftVector': '↽', 'DownLeftVectorBar': '⥖', 'DownRightTeeVector': '⥟', 'DownRightVector': '⇁', 'DownRightVectorBar': '⥗', 'DownTee': '⊤', 'DownTeeArrow': '↧', 'drbkarow': '⤐', 'drcorn': '⌟', 'drcrop': '⌌', 'dscr': '𝒹', 'Dscr': '𝒟', 'dscy': 'ѕ', 'DScy': 'Ѕ', 'dsol': '⧶', 'dstrok': 'đ', 'Dstrok': 'Đ', 'dtdot': '⋱', 'dtri': '▿', 'dtrif': '▾', 'duarr': '⇵', 'duhar': '⥯', 'dwangle': '⦦', 'dzcy': 'џ', 'DZcy': 'Џ', 'dzigrarr': '⟿', 'eacute': '\xE9', 'Eacute': '\xC9', 'easter': '⩮', 'ecaron': 'ě', 'Ecaron': 'Ě', 'ecir': '≖', 'ecirc': '\xEA', 'Ecirc': '\xCA', 'ecolon': '≕', 'ecy': 'э', 'Ecy': 'Э', 'eDDot': '⩷', 'edot': 'ė', 'eDot': '≑', 'Edot': 'Ė', 'ee': 'ⅇ', 'efDot': '≒', 'efr': '𝔢', 'Efr': '𝔈', 'eg': '⪚', 'egrave': '\xE8', 'Egrave': '\xC8', 'egs': '⪖', 'egsdot': '⪘', 'el': '⪙', 'Element': '∈', 'elinters': '⏧', 'ell': 'ℓ', 'els': '⪕', 'elsdot': '⪗', 'emacr': 'ē', 'Emacr': 'Ē', 'empty': '∅', 'emptyset': '∅', 'EmptySmallSquare': '◻', 'emptyv': '∅', 'EmptyVerySmallSquare': '▫', 'emsp': ' ', 'emsp13': ' ', 'emsp14': ' ', 'eng': 'ŋ', 'ENG': 'Ŋ', 'ensp': ' ', 'eogon': 'ę', 'Eogon': 'Ę', 'eopf': '𝕖', 'Eopf': '𝔼', 'epar': '⋕', 'eparsl': '⧣', 'eplus': '⩱', 'epsi': 'ε', 'epsilon': 'ε', 'Epsilon': 'Ε', 'epsiv': 'ϵ', 'eqcirc': '≖', 'eqcolon': '≕', 'eqsim': '≂', 'eqslantgtr': '⪖', 'eqslantless': '⪕', 'Equal': '⩵', 'equals': '=', 'EqualTilde': '≂', 'equest': '≟', 'Equilibrium': '⇌', 'equiv': '≡', 'equivDD': '⩸', 'eqvparsl': '⧥', 'erarr': '⥱', 'erDot': '≓', 'escr': 'ℯ', 'Escr': 'ℰ', 'esdot': '≐', 'esim': '≂', 'Esim': '⩳', 'eta': 'η', 'Eta': 'Η', 'eth': '\xF0', 'ETH': '\xD0', 'euml': '\xEB', 'Euml': '\xCB', 'euro': '€', 'excl': '!', 'exist': '∃', 'Exists': '∃', 'expectation': 'ℰ', 'exponentiale': 'ⅇ', 'ExponentialE': 'ⅇ', 'fallingdotseq': '≒', 'fcy': 'ф', 'Fcy': 'Ф', 'female': '♀', 'ffilig': 'ﬃ', 'fflig': 'ﬀ', 'ffllig': 'ﬄ', 'ffr': '𝔣', 'Ffr': '𝔉', 'filig': 'ﬁ', 'FilledSmallSquare': '◼', 'FilledVerySmallSquare': '▪', 'fjlig': 'fj', 'flat': '♭', 'fllig': 'ﬂ', 'fltns': '▱', 'fnof': 'ƒ', 'fopf': '𝕗', 'Fopf': '𝔽', 'forall': '∀', 'ForAll': '∀', 'fork': '⋔', 'forkv': '⫙', 'Fouriertrf': 'ℱ', 'fpartint': '⨍', 'frac12': '\xBD', 'frac13': '⅓', 'frac14': '\xBC', 'frac15': '⅕', 'frac16': '⅙', 'frac18': '⅛', 'frac23': '⅔', 'frac25': '⅖', 'frac34': '\xBE', 'frac35': '⅗', 'frac38': '⅜', 'frac45': '⅘', 'frac56': '⅚', 'frac58': '⅝', 'frac78': '⅞', 'frasl': '⁄', 'frown': '⌢', 'fscr': '𝒻', 'Fscr': 'ℱ', 'gacute': 'ǵ', 'gamma': 'γ', 'Gamma': 'Γ', 'gammad': 'ϝ', 'Gammad': 'Ϝ', 'gap': '⪆', 'gbreve': 'ğ', 'Gbreve': 'Ğ', 'Gcedil': 'Ģ', 'gcirc': 'ĝ', 'Gcirc': 'Ĝ', 'gcy': 'г', 'Gcy': 'Г', 'gdot': 'ġ', 'Gdot': 'Ġ', 'ge': '≥', 'gE': '≧', 'gel': '⋛', 'gEl': '⪌', 'geq': '≥', 'geqq': '≧', 'geqslant': '⩾', 'ges': '⩾', 'gescc': '⪩', 'gesdot': '⪀', 'gesdoto': '⪂', 'gesdotol': '⪄', 'gesl': '⋛︀', 'gesles': '⪔', 'gfr': '𝔤', 'Gfr': '𝔊', 'gg': '≫', 'Gg': '⋙', 'ggg': '⋙', 'gimel': 'ℷ', 'gjcy': 'ѓ', 'GJcy': 'Ѓ', 'gl': '≷', 'gla': '⪥', 'glE': '⪒', 'glj': '⪤', 'gnap': '⪊', 'gnapprox': '⪊', 'gne': '⪈', 'gnE': '≩', 'gneq': '⪈', 'gneqq': '≩', 'gnsim': '⋧', 'gopf': '𝕘', 'Gopf': '𝔾', 'grave': '`', 'GreaterEqual': '≥', 'GreaterEqualLess': '⋛', 'GreaterFullEqual': '≧', 'GreaterGreater': '⪢', 'GreaterLess': '≷', 'GreaterSlantEqual': '⩾', 'GreaterTilde': '≳', 'gscr': 'ℊ', 'Gscr': '𝒢', 'gsim': '≳', 'gsime': '⪎', 'gsiml': '⪐', 'gt': '>', 'Gt': '≫', 'GT': '>', 'gtcc': '⪧', 'gtcir': '⩺', 'gtdot': '⋗', 'gtlPar': '⦕', 'gtquest': '⩼', 'gtrapprox': '⪆', 'gtrarr': '⥸', 'gtrdot': '⋗', 'gtreqless': '⋛', 'gtreqqless': '⪌', 'gtrless': '≷', 'gtrsim': '≳', 'gvertneqq': '≩︀', 'gvnE': '≩︀', 'Hacek': 'ˇ', 'hairsp': ' ', 'half': '\xBD', 'hamilt': 'ℋ', 'hardcy': 'ъ', 'HARDcy': 'Ъ', 'harr': '↔', 'hArr': '⇔', 'harrcir': '⥈', 'harrw': '↭', 'Hat': '^', 'hbar': 'ℏ', 'hcirc': 'ĥ', 'Hcirc': 'Ĥ', 'hearts': '♥', 'heartsuit': '♥', 'hellip': '…', 'hercon': '⊹', 'hfr': '𝔥', 'Hfr': 'ℌ', 'HilbertSpace': 'ℋ', 'hksearow': '⤥', 'hkswarow': '⤦', 'hoarr': '⇿', 'homtht': '∻', 'hookleftarrow': '↩', 'hookrightarrow': '↪', 'hopf': '𝕙', 'Hopf': 'ℍ', 'horbar': '―', 'HorizontalLine': '─', 'hscr': '𝒽', 'Hscr': 'ℋ', 'hslash': 'ℏ', 'hstrok': 'ħ', 'Hstrok': 'Ħ', 'HumpDownHump': '≎', 'HumpEqual': '≏', 'hybull': '⁃', 'hyphen': '‐', 'iacute': '\xED', 'Iacute': '\xCD', 'ic': '⁣', 'icirc': '\xEE', 'Icirc': '\xCE', 'icy': 'и', 'Icy': 'И', 'Idot': 'İ', 'iecy': 'е', 'IEcy': 'Е', 'iexcl': '\xA1', 'iff': '⇔', 'ifr': '𝔦', 'Ifr': 'ℑ', 'igrave': '\xEC', 'Igrave': '\xCC', 'ii': 'ⅈ', 'iiiint': '⨌', 'iiint': '∭', 'iinfin': '⧜', 'iiota': '℩', 'ijlig': 'ĳ', 'IJlig': 'Ĳ', 'Im': 'ℑ', 'imacr': 'ī', 'Imacr': 'Ī', 'image': 'ℑ', 'ImaginaryI': 'ⅈ', 'imagline': 'ℐ', 'imagpart': 'ℑ', 'imath': 'ı', 'imof': '⊷', 'imped': 'Ƶ', 'Implies': '⇒', 'in': '∈', 'incare': '℅', 'infin': '∞', 'infintie': '⧝', 'inodot': 'ı', 'int': '∫', 'Int': '∬', 'intcal': '⊺', 'integers': 'ℤ', 'Integral': '∫', 'intercal': '⊺', 'Intersection': '⋂', 'intlarhk': '⨗', 'intprod': '⨼', 'InvisibleComma': '⁣', 'InvisibleTimes': '⁢', 'iocy': 'ё', 'IOcy': 'Ё', 'iogon': 'į', 'Iogon': 'Į', 'iopf': '𝕚', 'Iopf': '𝕀', 'iota': 'ι', 'Iota': 'Ι', 'iprod': '⨼', 'iquest': '\xBF', 'iscr': '𝒾', 'Iscr': 'ℐ', 'isin': '∈', 'isindot': '⋵', 'isinE': '⋹', 'isins': '⋴', 'isinsv': '⋳', 'isinv': '∈', 'it': '⁢', 'itilde': 'ĩ', 'Itilde': 'Ĩ', 'iukcy': 'і', 'Iukcy': 'І', 'iuml': '\xEF', 'Iuml': '\xCF', 'jcirc': 'ĵ', 'Jcirc': 'Ĵ', 'jcy': 'й', 'Jcy': 'Й', 'jfr': '𝔧', 'Jfr': '𝔍', 'jmath': 'ȷ', 'jopf': '𝕛', 'Jopf': '𝕁', 'jscr': '𝒿', 'Jscr': '𝒥', 'jsercy': 'ј', 'Jsercy': 'Ј', 'jukcy': 'є', 'Jukcy': 'Є', 'kappa': 'κ', 'Kappa': 'Κ', 'kappav': 'ϰ', 'kcedil': 'ķ', 'Kcedil': 'Ķ', 'kcy': 'к', 'Kcy': 'К', 'kfr': '𝔨', 'Kfr': '𝔎', 'kgreen': 'ĸ', 'khcy': 'х', 'KHcy': 'Х', 'kjcy': 'ќ', 'KJcy': 'Ќ', 'kopf': '𝕜', 'Kopf': '𝕂', 'kscr': '𝓀', 'Kscr': '𝒦', 'lAarr': '⇚', 'lacute': 'ĺ', 'Lacute': 'Ĺ', 'laemptyv': '⦴', 'lagran': 'ℒ', 'lambda': 'λ', 'Lambda': 'Λ', 'lang': '⟨', 'Lang': '⟪', 'langd': '⦑', 'langle': '⟨', 'lap': '⪅', 'Laplacetrf': 'ℒ', 'laquo': '\xAB', 'larr': '←', 'lArr': '⇐', 'Larr': '↞', 'larrb': '⇤', 'larrbfs': '⤟', 'larrfs': '⤝', 'larrhk': '↩', 'larrlp': '↫', 'larrpl': '⤹', 'larrsim': '⥳', 'larrtl': '↢', 'lat': '⪫', 'latail': '⤙', 'lAtail': '⤛', 'late': '⪭', 'lates': '⪭︀', 'lbarr': '⤌', 'lBarr': '⤎', 'lbbrk': '❲', 'lbrace': '{', 'lbrack': '[', 'lbrke': '⦋', 'lbrksld': '⦏', 'lbrkslu': '⦍', 'lcaron': 'ľ', 'Lcaron': 'Ľ', 'lcedil': 'ļ', 'Lcedil': 'Ļ', 'lceil': '⌈', 'lcub': '{', 'lcy': 'л', 'Lcy': 'Л', 'ldca': '⤶', 'ldquo': '“', 'ldquor': '„', 'ldrdhar': '⥧', 'ldrushar': '⥋', 'ldsh': '↲', 'le': '≤', 'lE': '≦', 'LeftAngleBracket': '⟨', 'leftarrow': '←', 'Leftarrow': '⇐', 'LeftArrow': '←', 'LeftArrowBar': '⇤', 'LeftArrowRightArrow': '⇆', 'leftarrowtail': '↢', 'LeftCeiling': '⌈', 'LeftDoubleBracket': '⟦', 'LeftDownTeeVector': '⥡', 'LeftDownVector': '⇃', 'LeftDownVectorBar': '⥙', 'LeftFloor': '⌊', 'leftharpoondown': '↽', 'leftharpoonup': '↼', 'leftleftarrows': '⇇', 'leftrightarrow': '↔', 'Leftrightarrow': '⇔', 'LeftRightArrow': '↔', 'leftrightarrows': '⇆', 'leftrightharpoons': '⇋', 'leftrightsquigarrow': '↭', 'LeftRightVector': '⥎', 'LeftTee': '⊣', 'LeftTeeArrow': '↤', 'LeftTeeVector': '⥚', 'leftthreetimes': '⋋', 'LeftTriangle': '⊲', 'LeftTriangleBar': '⧏', 'LeftTriangleEqual': '⊴', 'LeftUpDownVector': '⥑', 'LeftUpTeeVector': '⥠', 'LeftUpVector': '↿', 'LeftUpVectorBar': '⥘', 'LeftVector': '↼', 'LeftVectorBar': '⥒', 'leg': '⋚', 'lEg': '⪋', 'leq': '≤', 'leqq': '≦', 'leqslant': '⩽', 'les': '⩽', 'lescc': '⪨', 'lesdot': '⩿', 'lesdoto': '⪁', 'lesdotor': '⪃', 'lesg': '⋚︀', 'lesges': '⪓', 'lessapprox': '⪅', 'lessdot': '⋖', 'lesseqgtr': '⋚', 'lesseqqgtr': '⪋', 'LessEqualGreater': '⋚', 'LessFullEqual': '≦', 'LessGreater': '≶', 'lessgtr': '≶', 'LessLess': '⪡', 'lesssim': '≲', 'LessSlantEqual': '⩽', 'LessTilde': '≲', 'lfisht': '⥼', 'lfloor': '⌊', 'lfr': '𝔩', 'Lfr': '𝔏', 'lg': '≶', 'lgE': '⪑', 'lHar': '⥢', 'lhard': '↽', 'lharu': '↼', 'lharul': '⥪', 'lhblk': '▄', 'ljcy': 'љ', 'LJcy': 'Љ', 'll': '≪', 'Ll': '⋘', 'llarr': '⇇', 'llcorner': '⌞', 'Lleftarrow': '⇚', 'llhard': '⥫', 'lltri': '◺', 'lmidot': 'ŀ', 'Lmidot': 'Ŀ', 'lmoust': '⎰', 'lmoustache': '⎰', 'lnap': '⪉', 'lnapprox': '⪉', 'lne': '⪇', 'lnE': '≨', 'lneq': '⪇', 'lneqq': '≨', 'lnsim': '⋦', 'loang': '⟬', 'loarr': '⇽', 'lobrk': '⟦', 'longleftarrow': '⟵', 'Longleftarrow': '⟸', 'LongLeftArrow': '⟵', 'longleftrightarrow': '⟷', 'Longleftrightarrow': '⟺', 'LongLeftRightArrow': '⟷', 'longmapsto': '⟼', 'longrightarrow': '⟶', 'Longrightarrow': '⟹', 'LongRightArrow': '⟶', 'looparrowleft': '↫', 'looparrowright': '↬', 'lopar': '⦅', 'lopf': '𝕝', 'Lopf': '𝕃', 'loplus': '⨭', 'lotimes': '⨴', 'lowast': '∗', 'lowbar': '_', 'LowerLeftArrow': '↙', 'LowerRightArrow': '↘', 'loz': '◊', 'lozenge': '◊', 'lozf': '⧫', 'lpar': '(', 'lparlt': '⦓', 'lrarr': '⇆', 'lrcorner': '⌟', 'lrhar': '⇋', 'lrhard': '⥭', 'lrm': '‎', 'lrtri': '⊿', 'lsaquo': '‹', 'lscr': '𝓁', 'Lscr': 'ℒ', 'lsh': '↰', 'Lsh': '↰', 'lsim': '≲', 'lsime': '⪍', 'lsimg': '⪏', 'lsqb': '[', 'lsquo': '‘', 'lsquor': '‚', 'lstrok': 'ł', 'Lstrok': 'Ł', 'lt': '<', 'Lt': '≪', 'LT': '<', 'ltcc': '⪦', 'ltcir': '⩹', 'ltdot': '⋖', 'lthree': '⋋', 'ltimes': '⋉', 'ltlarr': '⥶', 'ltquest': '⩻', 'ltri': '◃', 'ltrie': '⊴', 'ltrif': '◂', 'ltrPar': '⦖', 'lurdshar': '⥊', 'luruhar': '⥦', 'lvertneqq': '≨︀', 'lvnE': '≨︀', 'macr': '\xAF', 'male': '♂', 'malt': '✠', 'maltese': '✠', 'map': '↦', 'Map': '⤅', 'mapsto': '↦', 'mapstodown': '↧', 'mapstoleft': '↤', 'mapstoup': '↥', 'marker': '▮', 'mcomma': '⨩', 'mcy': 'м', 'Mcy': 'М', 'mdash': '—', 'mDDot': '∺', 'measuredangle': '∡', 'MediumSpace': ' ', 'Mellintrf': 'ℳ', 'mfr': '𝔪', 'Mfr': '𝔐', 'mho': '℧', 'micro': '\xB5', 'mid': '∣', 'midast': '*', 'midcir': '⫰', 'middot': '\xB7', 'minus': '−', 'minusb': '⊟', 'minusd': '∸', 'minusdu': '⨪', 'MinusPlus': '∓', 'mlcp': '⫛', 'mldr': '…', 'mnplus': '∓', 'models': '⊧', 'mopf': '𝕞', 'Mopf': '𝕄', 'mp': '∓', 'mscr': '𝓂', 'Mscr': 'ℳ', 'mstpos': '∾', 'mu': 'μ', 'Mu': 'Μ', 'multimap': '⊸', 'mumap': '⊸', 'nabla': '∇', 'nacute': 'ń', 'Nacute': 'Ń', 'nang': '∠⃒', 'nap': '≉', 'napE': '⩰̸', 'napid': '≋̸', 'napos': 'ŉ', 'napprox': '≉', 'natur': '♮', 'natural': '♮', 'naturals': 'ℕ', 'nbsp': '\xA0', 'nbump': '≎̸', 'nbumpe': '≏̸', 'ncap': '⩃', 'ncaron': 'ň', 'Ncaron': 'Ň', 'ncedil': 'ņ', 'Ncedil': 'Ņ', 'ncong': '≇', 'ncongdot': '⩭̸', 'ncup': '⩂', 'ncy': 'н', 'Ncy': 'Н', 'ndash': '–', 'ne': '≠', 'nearhk': '⤤', 'nearr': '↗', 'neArr': '⇗', 'nearrow': '↗', 'nedot': '≐̸', 'NegativeMediumSpace': '​', 'NegativeThickSpace': '​', 'NegativeThinSpace': '​', 'NegativeVeryThinSpace': '​', 'nequiv': '≢', 'nesear': '⤨', 'nesim': '≂̸', 'NestedGreaterGreater': '≫', 'NestedLessLess': '≪', 'NewLine': '\n', 'nexist': '∄', 'nexists': '∄', 'nfr': '𝔫', 'Nfr': '𝔑', 'nge': '≱', 'ngE': '≧̸', 'ngeq': '≱', 'ngeqq': '≧̸', 'ngeqslant': '⩾̸', 'nges': '⩾̸', 'nGg': '⋙̸', 'ngsim': '≵', 'ngt': '≯', 'nGt': '≫⃒', 'ngtr': '≯', 'nGtv': '≫̸', 'nharr': '↮', 'nhArr': '⇎', 'nhpar': '⫲', 'ni': '∋', 'nis': '⋼', 'nisd': '⋺', 'niv': '∋', 'njcy': 'њ', 'NJcy': 'Њ', 'nlarr': '↚', 'nlArr': '⇍', 'nldr': '‥', 'nle': '≰', 'nlE': '≦̸', 'nleftarrow': '↚', 'nLeftarrow': '⇍', 'nleftrightarrow': '↮', 'nLeftrightarrow': '⇎', 'nleq': '≰', 'nleqq': '≦̸', 'nleqslant': '⩽̸', 'nles': '⩽̸', 'nless': '≮', 'nLl': '⋘̸', 'nlsim': '≴', 'nlt': '≮', 'nLt': '≪⃒', 'nltri': '⋪', 'nltrie': '⋬', 'nLtv': '≪̸', 'nmid': '∤', 'NoBreak': '⁠', 'NonBreakingSpace': '\xA0', 'nopf': '𝕟', 'Nopf': 'ℕ', 'not': '\xAC', 'Not': '⫬', 'NotCongruent': '≢', 'NotCupCap': '≭', 'NotDoubleVerticalBar': '∦', 'NotElement': '∉', 'NotEqual': '≠', 'NotEqualTilde': '≂̸', 'NotExists': '∄', 'NotGreater': '≯', 'NotGreaterEqual': '≱', 'NotGreaterFullEqual': '≧̸', 'NotGreaterGreater': '≫̸', 'NotGreaterLess': '≹', 'NotGreaterSlantEqual': '⩾̸', 'NotGreaterTilde': '≵', 'NotHumpDownHump': '≎̸', 'NotHumpEqual': '≏̸', 'notin': '∉', 'notindot': '⋵̸', 'notinE': '⋹̸', 'notinva': '∉', 'notinvb': '⋷', 'notinvc': '⋶', 'NotLeftTriangle': '⋪', 'NotLeftTriangleBar': '⧏̸', 'NotLeftTriangleEqual': '⋬', 'NotLess': '≮', 'NotLessEqual': '≰', 'NotLessGreater': '≸', 'NotLessLess': '≪̸', 'NotLessSlantEqual': '⩽̸', 'NotLessTilde': '≴', 'NotNestedGreaterGreater': '⪢̸', 'NotNestedLessLess': '⪡̸', 'notni': '∌', 'notniva': '∌', 'notnivb': '⋾', 'notnivc': '⋽', 'NotPrecedes': '⊀', 'NotPrecedesEqual': '⪯̸', 'NotPrecedesSlantEqual': '⋠', 'NotReverseElement': '∌', 'NotRightTriangle': '⋫', 'NotRightTriangleBar': '⧐̸', 'NotRightTriangleEqual': '⋭', 'NotSquareSubset': '⊏̸', 'NotSquareSubsetEqual': '⋢', 'NotSquareSuperset': '⊐̸', 'NotSquareSupersetEqual': '⋣', 'NotSubset': '⊂⃒', 'NotSubsetEqual': '⊈', 'NotSucceeds': '⊁', 'NotSucceedsEqual': '⪰̸', 'NotSucceedsSlantEqual': '⋡', 'NotSucceedsTilde': '≿̸', 'NotSuperset': '⊃⃒', 'NotSupersetEqual': '⊉', 'NotTilde': '≁', 'NotTildeEqual': '≄', 'NotTildeFullEqual': '≇', 'NotTildeTilde': '≉', 'NotVerticalBar': '∤', 'npar': '∦', 'nparallel': '∦', 'nparsl': '⫽⃥', 'npart': '∂̸', 'npolint': '⨔', 'npr': '⊀', 'nprcue': '⋠', 'npre': '⪯̸', 'nprec': '⊀', 'npreceq': '⪯̸', 'nrarr': '↛', 'nrArr': '⇏', 'nrarrc': '⤳̸', 'nrarrw': '↝̸', 'nrightarrow': '↛', 'nRightarrow': '⇏', 'nrtri': '⋫', 'nrtrie': '⋭', 'nsc': '⊁', 'nsccue': '⋡', 'nsce': '⪰̸', 'nscr': '𝓃', 'Nscr': '𝒩', 'nshortmid': '∤', 'nshortparallel': '∦', 'nsim': '≁', 'nsime': '≄', 'nsimeq': '≄', 'nsmid': '∤', 'nspar': '∦', 'nsqsube': '⋢', 'nsqsupe': '⋣', 'nsub': '⊄', 'nsube': '⊈', 'nsubE': '⫅̸', 'nsubset': '⊂⃒', 'nsubseteq': '⊈', 'nsubseteqq': '⫅̸', 'nsucc': '⊁', 'nsucceq': '⪰̸', 'nsup': '⊅', 'nsupe': '⊉', 'nsupE': '⫆̸', 'nsupset': '⊃⃒', 'nsupseteq': '⊉', 'nsupseteqq': '⫆̸', 'ntgl': '≹', 'ntilde': '\xF1', 'Ntilde': '\xD1', 'ntlg': '≸', 'ntriangleleft': '⋪', 'ntrianglelefteq': '⋬', 'ntriangleright': '⋫', 'ntrianglerighteq': '⋭', 'nu': 'ν', 'Nu': 'Ν', 'num': '#', 'numero': '№', 'numsp': ' ', 'nvap': '≍⃒', 'nvdash': '⊬', 'nvDash': '⊭', 'nVdash': '⊮', 'nVDash': '⊯', 'nvge': '≥⃒', 'nvgt': '>⃒', 'nvHarr': '⤄', 'nvinfin': '⧞', 'nvlArr': '⤂', 'nvle': '≤⃒', 'nvlt': '<⃒', 'nvltrie': '⊴⃒', 'nvrArr': '⤃', 'nvrtrie': '⊵⃒', 'nvsim': '∼⃒', 'nwarhk': '⤣', 'nwarr': '↖', 'nwArr': '⇖', 'nwarrow': '↖', 'nwnear': '⤧', 'oacute': '\xF3', 'Oacute': '\xD3', 'oast': '⊛', 'ocir': '⊚', 'ocirc': '\xF4', 'Ocirc': '\xD4', 'ocy': 'о', 'Ocy': 'О', 'odash': '⊝', 'odblac': 'ő', 'Odblac': 'Ő', 'odiv': '⨸', 'odot': '⊙', 'odsold': '⦼', 'oelig': 'œ', 'OElig': 'Œ', 'ofcir': '⦿', 'ofr': '𝔬', 'Ofr': '𝔒', 'ogon': '˛', 'ograve': '\xF2', 'Ograve': '\xD2', 'ogt': '⧁', 'ohbar': '⦵', 'ohm': 'Ω', 'oint': '∮', 'olarr': '↺', 'olcir': '⦾', 'olcross': '⦻', 'oline': '‾', 'olt': '⧀', 'omacr': 'ō', 'Omacr': 'Ō', 'omega': 'ω', 'Omega': 'Ω', 'omicron': 'ο', 'Omicron': 'Ο', 'omid': '⦶', 'ominus': '⊖', 'oopf': '𝕠', 'Oopf': '𝕆', 'opar': '⦷', 'OpenCurlyDoubleQuote': '“', 'OpenCurlyQuote': '‘', 'operp': '⦹', 'oplus': '⊕', 'or': '∨', 'Or': '⩔', 'orarr': '↻', 'ord': '⩝', 'order': 'ℴ', 'orderof': 'ℴ', 'ordf': '\xAA', 'ordm': '\xBA', 'origof': '⊶', 'oror': '⩖', 'orslope': '⩗', 'orv': '⩛', 'oS': 'Ⓢ', 'oscr': 'ℴ', 'Oscr': '𝒪', 'oslash': '\xF8', 'Oslash': '\xD8', 'osol': '⊘', 'otilde': '\xF5', 'Otilde': '\xD5', 'otimes': '⊗', 'Otimes': '⨷', 'otimesas': '⨶', 'ouml': '\xF6', 'Ouml': '\xD6', 'ovbar': '⌽', 'OverBar': '‾', 'OverBrace': '⏞', 'OverBracket': '⎴', 'OverParenthesis': '⏜', 'par': '∥', 'para': '\xB6', 'parallel': '∥', 'parsim': '⫳', 'parsl': '⫽', 'part': '∂', 'PartialD': '∂', 'pcy': 'п', 'Pcy': 'П', 'percnt': '%', 'period': '.', 'permil': '‰', 'perp': '⊥', 'pertenk': '‱', 'pfr': '𝔭', 'Pfr': '𝔓', 'phi': 'φ', 'Phi': 'Φ', 'phiv': 'ϕ', 'phmmat': 'ℳ', 'phone': '☎', 'pi': 'π', 'Pi': 'Π', 'pitchfork': '⋔', 'piv': 'ϖ', 'planck': 'ℏ', 'planckh': 'ℎ', 'plankv': 'ℏ', 'plus': '+', 'plusacir': '⨣', 'plusb': '⊞', 'pluscir': '⨢', 'plusdo': '∔', 'plusdu': '⨥', 'pluse': '⩲', 'PlusMinus': '\xB1', 'plusmn': '\xB1', 'plussim': '⨦', 'plustwo': '⨧', 'pm': '\xB1', 'Poincareplane': 'ℌ', 'pointint': '⨕', 'popf': '𝕡', 'Popf': 'ℙ', 'pound': '\xA3', 'pr': '≺', 'Pr': '⪻', 'prap': '⪷', 'prcue': '≼', 'pre': '⪯', 'prE': '⪳', 'prec': '≺', 'precapprox': '⪷', 'preccurlyeq': '≼', 'Precedes': '≺', 'PrecedesEqual': '⪯', 'PrecedesSlantEqual': '≼', 'PrecedesTilde': '≾', 'preceq': '⪯', 'precnapprox': '⪹', 'precneqq': '⪵', 'precnsim': '⋨', 'precsim': '≾', 'prime': '′', 'Prime': '″', 'primes': 'ℙ', 'prnap': '⪹', 'prnE': '⪵', 'prnsim': '⋨', 'prod': '∏', 'Product': '∏', 'profalar': '⌮', 'profline': '⌒', 'profsurf': '⌓', 'prop': '∝', 'Proportion': '∷', 'Proportional': '∝', 'propto': '∝', 'prsim': '≾', 'prurel': '⊰', 'pscr': '𝓅', 'Pscr': '𝒫', 'psi': 'ψ', 'Psi': 'Ψ', 'puncsp': ' ', 'qfr': '𝔮', 'Qfr': '𝔔', 'qint': '⨌', 'qopf': '𝕢', 'Qopf': 'ℚ', 'qprime': '⁗', 'qscr': '𝓆', 'Qscr': '𝒬', 'quaternions': 'ℍ', 'quatint': '⨖', 'quest': '?', 'questeq': '≟', 'quot': '"', 'QUOT': '"', 'rAarr': '⇛', 'race': '∽̱', 'racute': 'ŕ', 'Racute': 'Ŕ', 'radic': '√', 'raemptyv': '⦳', 'rang': '⟩', 'Rang': '⟫', 'rangd': '⦒', 'range': '⦥', 'rangle': '⟩', 'raquo': '\xBB', 'rarr': '→', 'rArr': '⇒', 'Rarr': '↠', 'rarrap': '⥵', 'rarrb': '⇥', 'rarrbfs': '⤠', 'rarrc': '⤳', 'rarrfs': '⤞', 'rarrhk': '↪', 'rarrlp': '↬', 'rarrpl': '⥅', 'rarrsim': '⥴', 'rarrtl': '↣', 'Rarrtl': '⤖', 'rarrw': '↝', 'ratail': '⤚', 'rAtail': '⤜', 'ratio': '∶', 'rationals': 'ℚ', 'rbarr': '⤍', 'rBarr': '⤏', 'RBarr': '⤐', 'rbbrk': '❳', 'rbrace': '}', 'rbrack': ']', 'rbrke': '⦌', 'rbrksld': '⦎', 'rbrkslu': '⦐', 'rcaron': 'ř', 'Rcaron': 'Ř', 'rcedil': 'ŗ', 'Rcedil': 'Ŗ', 'rceil': '⌉', 'rcub': '}', 'rcy': 'р', 'Rcy': 'Р', 'rdca': '⤷', 'rdldhar': '⥩', 'rdquo': '”', 'rdquor': '”', 'rdsh': '↳', 'Re': 'ℜ', 'real': 'ℜ', 'realine': 'ℛ', 'realpart': 'ℜ', 'reals': 'ℝ', 'rect': '▭', 'reg': '\xAE', 'REG': '\xAE', 'ReverseElement': '∋', 'ReverseEquilibrium': '⇋', 'ReverseUpEquilibrium': '⥯', 'rfisht': '⥽', 'rfloor': '⌋', 'rfr': '𝔯', 'Rfr': 'ℜ', 'rHar': '⥤', 'rhard': '⇁', 'rharu': '⇀', 'rharul': '⥬', 'rho': 'ρ', 'Rho': 'Ρ', 'rhov': 'ϱ', 'RightAngleBracket': '⟩', 'rightarrow': '→', 'Rightarrow': '⇒', 'RightArrow': '→', 'RightArrowBar': '⇥', 'RightArrowLeftArrow': '⇄', 'rightarrowtail': '↣', 'RightCeiling': '⌉', 'RightDoubleBracket': '⟧', 'RightDownTeeVector': '⥝', 'RightDownVector': '⇂', 'RightDownVectorBar': '⥕', 'RightFloor': '⌋', 'rightharpoondown': '⇁', 'rightharpoonup': '⇀', 'rightleftarrows': '⇄', 'rightleftharpoons': '⇌', 'rightrightarrows': '⇉', 'rightsquigarrow': '↝', 'RightTee': '⊢', 'RightTeeArrow': '↦', 'RightTeeVector': '⥛', 'rightthreetimes': '⋌', 'RightTriangle': '⊳', 'RightTriangleBar': '⧐', 'RightTriangleEqual': '⊵', 'RightUpDownVector': '⥏', 'RightUpTeeVector': '⥜', 'RightUpVector': '↾', 'RightUpVectorBar': '⥔', 'RightVector': '⇀', 'RightVectorBar': '⥓', 'ring': '˚', 'risingdotseq': '≓', 'rlarr': '⇄', 'rlhar': '⇌', 'rlm': '‏', 'rmoust': '⎱', 'rmoustache': '⎱', 'rnmid': '⫮', 'roang': '⟭', 'roarr': '⇾', 'robrk': '⟧', 'ropar': '⦆', 'ropf': '𝕣', 'Ropf': 'ℝ', 'roplus': '⨮', 'rotimes': '⨵', 'RoundImplies': '⥰', 'rpar': ')', 'rpargt': '⦔', 'rppolint': '⨒', 'rrarr': '⇉', 'Rrightarrow': '⇛', 'rsaquo': '›', 'rscr': '𝓇', 'Rscr': 'ℛ', 'rsh': '↱', 'Rsh': '↱', 'rsqb': ']', 'rsquo': '’', 'rsquor': '’', 'rthree': '⋌', 'rtimes': '⋊', 'rtri': '▹', 'rtrie': '⊵', 'rtrif': '▸', 'rtriltri': '⧎', 'RuleDelayed': '⧴', 'ruluhar': '⥨', 'rx': '℞', 'sacute': 'ś', 'Sacute': 'Ś', 'sbquo': '‚', 'sc': '≻', 'Sc': '⪼', 'scap': '⪸', 'scaron': 'š', 'Scaron': 'Š', 'sccue': '≽', 'sce': '⪰', 'scE': '⪴', 'scedil': 'ş', 'Scedil': 'Ş', 'scirc': 'ŝ', 'Scirc': 'Ŝ', 'scnap': '⪺', 'scnE': '⪶', 'scnsim': '⋩', 'scpolint': '⨓', 'scsim': '≿', 'scy': 'с', 'Scy': 'С', 'sdot': '⋅', 'sdotb': '⊡', 'sdote': '⩦', 'searhk': '⤥', 'searr': '↘', 'seArr': '⇘', 'searrow': '↘', 'sect': '\xA7', 'semi': ';', 'seswar': '⤩', 'setminus': '∖', 'setmn': '∖', 'sext': '✶', 'sfr': '𝔰', 'Sfr': '𝔖', 'sfrown': '⌢', 'sharp': '♯', 'shchcy': 'щ', 'SHCHcy': 'Щ', 'shcy': 'ш', 'SHcy': 'Ш', 'ShortDownArrow': '↓', 'ShortLeftArrow': '←', 'shortmid': '∣', 'shortparallel': '∥', 'ShortRightArrow': '→', 'ShortUpArrow': '↑', 'shy': '\xAD', 'sigma': 'σ', 'Sigma': 'Σ', 'sigmaf': 'ς', 'sigmav': 'ς', 'sim': '∼', 'simdot': '⩪', 'sime': '≃', 'simeq': '≃', 'simg': '⪞', 'simgE': '⪠', 'siml': '⪝', 'simlE': '⪟', 'simne': '≆', 'simplus': '⨤', 'simrarr': '⥲', 'slarr': '←', 'SmallCircle': '∘', 'smallsetminus': '∖', 'smashp': '⨳', 'smeparsl': '⧤', 'smid': '∣', 'smile': '⌣', 'smt': '⪪', 'smte': '⪬', 'smtes': '⪬︀', 'softcy': 'ь', 'SOFTcy': 'Ь', 'sol': '/', 'solb': '⧄', 'solbar': '⌿', 'sopf': '𝕤', 'Sopf': '𝕊', 'spades': '♠', 'spadesuit': '♠', 'spar': '∥', 'sqcap': '⊓', 'sqcaps': '⊓︀', 'sqcup': '⊔', 'sqcups': '⊔︀', 'Sqrt': '√', 'sqsub': '⊏', 'sqsube': '⊑', 'sqsubset': '⊏', 'sqsubseteq': '⊑', 'sqsup': '⊐', 'sqsupe': '⊒', 'sqsupset': '⊐', 'sqsupseteq': '⊒', 'squ': '□', 'square': '□', 'Square': '□', 'SquareIntersection': '⊓', 'SquareSubset': '⊏', 'SquareSubsetEqual': '⊑', 'SquareSuperset': '⊐', 'SquareSupersetEqual': '⊒', 'SquareUnion': '⊔', 'squarf': '▪', 'squf': '▪', 'srarr': '→', 'sscr': '𝓈', 'Sscr': '𝒮', 'ssetmn': '∖', 'ssmile': '⌣', 'sstarf': '⋆', 'star': '☆', 'Star': '⋆', 'starf': '★', 'straightepsilon': 'ϵ', 'straightphi': 'ϕ', 'strns': '\xAF', 'sub': '⊂', 'Sub': '⋐', 'subdot': '⪽', 'sube': '⊆', 'subE': '⫅', 'subedot': '⫃', 'submult': '⫁', 'subne': '⊊', 'subnE': '⫋', 'subplus': '⪿', 'subrarr': '⥹', 'subset': '⊂', 'Subset': '⋐', 'subseteq': '⊆', 'subseteqq': '⫅', 'SubsetEqual': '⊆', 'subsetneq': '⊊', 'subsetneqq': '⫋', 'subsim': '⫇', 'subsub': '⫕', 'subsup': '⫓', 'succ': '≻', 'succapprox': '⪸', 'succcurlyeq': '≽', 'Succeeds': '≻', 'SucceedsEqual': '⪰', 'SucceedsSlantEqual': '≽', 'SucceedsTilde': '≿', 'succeq': '⪰', 'succnapprox': '⪺', 'succneqq': '⪶', 'succnsim': '⋩', 'succsim': '≿', 'SuchThat': '∋', 'sum': '∑', 'Sum': '∑', 'sung': '♪', 'sup': '⊃', 'Sup': '⋑', 'sup1': '\xB9', 'sup2': '\xB2', 'sup3': '\xB3', 'supdot': '⪾', 'supdsub': '⫘', 'supe': '⊇', 'supE': '⫆', 'supedot': '⫄', 'Superset': '⊃', 'SupersetEqual': '⊇', 'suphsol': '⟉', 'suphsub': '⫗', 'suplarr': '⥻', 'supmult': '⫂', 'supne': '⊋', 'supnE': '⫌', 'supplus': '⫀', 'supset': '⊃', 'Supset': '⋑', 'supseteq': '⊇', 'supseteqq': '⫆', 'supsetneq': '⊋', 'supsetneqq': '⫌', 'supsim': '⫈', 'supsub': '⫔', 'supsup': '⫖', 'swarhk': '⤦', 'swarr': '↙', 'swArr': '⇙', 'swarrow': '↙', 'swnwar': '⤪', 'szlig': '\xDF', 'Tab': '\t', 'target': '⌖', 'tau': 'τ', 'Tau': 'Τ', 'tbrk': '⎴', 'tcaron': 'ť', 'Tcaron': 'Ť', 'tcedil': 'ţ', 'Tcedil': 'Ţ', 'tcy': 'т', 'Tcy': 'Т', 'tdot': '⃛', 'telrec': '⌕', 'tfr': '𝔱', 'Tfr': '𝔗', 'there4': '∴', 'therefore': '∴', 'Therefore': '∴', 'theta': 'θ', 'Theta': 'Θ', 'thetasym': 'ϑ', 'thetav': 'ϑ', 'thickapprox': '≈', 'thicksim': '∼', 'ThickSpace': '  ', 'thinsp': ' ', 'ThinSpace': ' ', 'thkap': '≈', 'thksim': '∼', 'thorn': '\xFE', 'THORN': '\xDE', 'tilde': '˜', 'Tilde': '∼', 'TildeEqual': '≃', 'TildeFullEqual': '≅', 'TildeTilde': '≈', 'times': '\xD7', 'timesb': '⊠', 'timesbar': '⨱', 'timesd': '⨰', 'tint': '∭', 'toea': '⤨', 'top': '⊤', 'topbot': '⌶', 'topcir': '⫱', 'topf': '𝕥', 'Topf': '𝕋', 'topfork': '⫚', 'tosa': '⤩', 'tprime': '‴', 'trade': '™', 'TRADE': '™', 'triangle': '▵', 'triangledown': '▿', 'triangleleft': '◃', 'trianglelefteq': '⊴', 'triangleq': '≜', 'triangleright': '▹', 'trianglerighteq': '⊵', 'tridot': '◬', 'trie': '≜', 'triminus': '⨺', 'TripleDot': '⃛', 'triplus': '⨹', 'trisb': '⧍', 'tritime': '⨻', 'trpezium': '⏢', 'tscr': '𝓉', 'Tscr': '𝒯', 'tscy': 'ц', 'TScy': 'Ц', 'tshcy': 'ћ', 'TSHcy': 'Ћ', 'tstrok': 'ŧ', 'Tstrok': 'Ŧ', 'twixt': '≬', 'twoheadleftarrow': '↞', 'twoheadrightarrow': '↠', 'uacute': '\xFA', 'Uacute': '\xDA', 'uarr': '↑', 'uArr': '⇑', 'Uarr': '↟', 'Uarrocir': '⥉', 'ubrcy': 'ў', 'Ubrcy': 'Ў', 'ubreve': 'ŭ', 'Ubreve': 'Ŭ', 'ucirc': '\xFB', 'Ucirc': '\xDB', 'ucy': 'у', 'Ucy': 'У', 'udarr': '⇅', 'udblac': 'ű', 'Udblac': 'Ű', 'udhar': '⥮', 'ufisht': '⥾', 'ufr': '𝔲', 'Ufr': '𝔘', 'ugrave': '\xF9', 'Ugrave': '\xD9', 'uHar': '⥣', 'uharl': '↿', 'uharr': '↾', 'uhblk': '▀', 'ulcorn': '⌜', 'ulcorner': '⌜', 'ulcrop': '⌏', 'ultri': '◸', 'umacr': 'ū', 'Umacr': 'Ū', 'uml': '\xA8', 'UnderBar': '_', 'UnderBrace': '⏟', 'UnderBracket': '⎵', 'UnderParenthesis': '⏝', 'Union': '⋃', 'UnionPlus': '⊎', 'uogon': 'ų', 'Uogon': 'Ų', 'uopf': '𝕦', 'Uopf': '𝕌', 'uparrow': '↑', 'Uparrow': '⇑', 'UpArrow': '↑', 'UpArrowBar': '⤒', 'UpArrowDownArrow': '⇅', 'updownarrow': '↕', 'Updownarrow': '⇕', 'UpDownArrow': '↕', 'UpEquilibrium': '⥮', 'upharpoonleft': '↿', 'upharpoonright': '↾', 'uplus': '⊎', 'UpperLeftArrow': '↖', 'UpperRightArrow': '↗', 'upsi': 'υ', 'Upsi': 'ϒ', 'upsih': 'ϒ', 'upsilon': 'υ', 'Upsilon': 'Υ', 'UpTee': '⊥', 'UpTeeArrow': '↥', 'upuparrows': '⇈', 'urcorn': '⌝', 'urcorner': '⌝', 'urcrop': '⌎', 'uring': 'ů', 'Uring': 'Ů', 'urtri': '◹', 'uscr': '𝓊', 'Uscr': '𝒰', 'utdot': '⋰', 'utilde': 'ũ', 'Utilde': 'Ũ', 'utri': '▵', 'utrif': '▴', 'uuarr': '⇈', 'uuml': '\xFC', 'Uuml': '\xDC', 'uwangle': '⦧', 'vangrt': '⦜', 'varepsilon': 'ϵ', 'varkappa': 'ϰ', 'varnothing': '∅', 'varphi': 'ϕ', 'varpi': 'ϖ', 'varpropto': '∝', 'varr': '↕', 'vArr': '⇕', 'varrho': 'ϱ', 'varsigma': 'ς', 'varsubsetneq': '⊊︀', 'varsubsetneqq': '⫋︀', 'varsupsetneq': '⊋︀', 'varsupsetneqq': '⫌︀', 'vartheta': 'ϑ', 'vartriangleleft': '⊲', 'vartriangleright': '⊳', 'vBar': '⫨', 'Vbar': '⫫', 'vBarv': '⫩', 'vcy': 'в', 'Vcy': 'В', 'vdash': '⊢', 'vDash': '⊨', 'Vdash': '⊩', 'VDash': '⊫', 'Vdashl': '⫦', 'vee': '∨', 'Vee': '⋁', 'veebar': '⊻', 'veeeq': '≚', 'vellip': '⋮', 'verbar': '|', 'Verbar': '‖', 'vert': '|', 'Vert': '‖', 'VerticalBar': '∣', 'VerticalLine': '|', 'VerticalSeparator': '❘', 'VerticalTilde': '≀', 'VeryThinSpace': ' ', 'vfr': '𝔳', 'Vfr': '𝔙', 'vltri': '⊲', 'vnsub': '⊂⃒', 'vnsup': '⊃⃒', 'vopf': '𝕧', 'Vopf': '𝕍', 'vprop': '∝', 'vrtri': '⊳', 'vscr': '𝓋', 'Vscr': '𝒱', 'vsubne': '⊊︀', 'vsubnE': '⫋︀', 'vsupne': '⊋︀', 'vsupnE': '⫌︀', 'Vvdash': '⊪', 'vzigzag': '⦚', 'wcirc': 'ŵ', 'Wcirc': 'Ŵ', 'wedbar': '⩟', 'wedge': '∧', 'Wedge': '⋀', 'wedgeq': '≙', 'weierp': '℘', 'wfr': '𝔴', 'Wfr': '𝔚', 'wopf': '𝕨', 'Wopf': '𝕎', 'wp': '℘', 'wr': '≀', 'wreath': '≀', 'wscr': '𝓌', 'Wscr': '𝒲', 'xcap': '⋂', 'xcirc': '◯', 'xcup': '⋃', 'xdtri': '▽', 'xfr': '𝔵', 'Xfr': '𝔛', 'xharr': '⟷', 'xhArr': '⟺', 'xi': 'ξ', 'Xi': 'Ξ', 'xlarr': '⟵', 'xlArr': '⟸', 'xmap': '⟼', 'xnis': '⋻', 'xodot': '⨀', 'xopf': '𝕩', 'Xopf': '𝕏', 'xoplus': '⨁', 'xotime': '⨂', 'xrarr': '⟶', 'xrArr': '⟹', 'xscr': '𝓍', 'Xscr': '𝒳', 'xsqcup': '⨆', 'xuplus': '⨄', 'xutri': '△', 'xvee': '⋁', 'xwedge': '⋀', 'yacute': '\xFD', 'Yacute': '\xDD', 'yacy': 'я', 'YAcy': 'Я', 'ycirc': 'ŷ', 'Ycirc': 'Ŷ', 'ycy': 'ы', 'Ycy': 'Ы', 'yen': '\xA5', 'yfr': '𝔶', 'Yfr': '𝔜', 'yicy': 'ї', 'YIcy': 'Ї', 'yopf': '𝕪', 'Yopf': '𝕐', 'yscr': '𝓎', 'Yscr': '𝒴', 'yucy': 'ю', 'YUcy': 'Ю', 'yuml': '\xFF', 'Yuml': 'Ÿ', 'zacute': 'ź', 'Zacute': 'Ź', 'zcaron': 'ž', 'Zcaron': 'Ž', 'zcy': 'з', 'Zcy': 'З', 'zdot': 'ż', 'Zdot': 'Ż', 'zeetrf': 'ℨ', 'ZeroWidthSpace': '​', 'zeta': 'ζ', 'Zeta': 'Ζ', 'zfr': '𝔷', 'Zfr': 'ℨ', 'zhcy': 'ж', 'ZHcy': 'Ж', 'zigrarr': '⇝', 'zopf': '𝕫', 'Zopf': 'ℤ', 'zscr': '𝓏', 'Zscr': '𝒵', 'zwj': '‍', 'zwnj': '‌' };
  	var decodeMapLegacy = { 'aacute': '\xE1', 'Aacute': '\xC1', 'acirc': '\xE2', 'Acirc': '\xC2', 'acute': '\xB4', 'aelig': '\xE6', 'AElig': '\xC6', 'agrave': '\xE0', 'Agrave': '\xC0', 'amp': '&', 'AMP': '&', 'aring': '\xE5', 'Aring': '\xC5', 'atilde': '\xE3', 'Atilde': '\xC3', 'auml': '\xE4', 'Auml': '\xC4', 'brvbar': '\xA6', 'ccedil': '\xE7', 'Ccedil': '\xC7', 'cedil': '\xB8', 'cent': '\xA2', 'copy': '\xA9', 'COPY': '\xA9', 'curren': '\xA4', 'deg': '\xB0', 'divide': '\xF7', 'eacute': '\xE9', 'Eacute': '\xC9', 'ecirc': '\xEA', 'Ecirc': '\xCA', 'egrave': '\xE8', 'Egrave': '\xC8', 'eth': '\xF0', 'ETH': '\xD0', 'euml': '\xEB', 'Euml': '\xCB', 'frac12': '\xBD', 'frac14': '\xBC', 'frac34': '\xBE', 'gt': '>', 'GT': '>', 'iacute': '\xED', 'Iacute': '\xCD', 'icirc': '\xEE', 'Icirc': '\xCE', 'iexcl': '\xA1', 'igrave': '\xEC', 'Igrave': '\xCC', 'iquest': '\xBF', 'iuml': '\xEF', 'Iuml': '\xCF', 'laquo': '\xAB', 'lt': '<', 'LT': '<', 'macr': '\xAF', 'micro': '\xB5', 'middot': '\xB7', 'nbsp': '\xA0', 'not': '\xAC', 'ntilde': '\xF1', 'Ntilde': '\xD1', 'oacute': '\xF3', 'Oacute': '\xD3', 'ocirc': '\xF4', 'Ocirc': '\xD4', 'ograve': '\xF2', 'Ograve': '\xD2', 'ordf': '\xAA', 'ordm': '\xBA', 'oslash': '\xF8', 'Oslash': '\xD8', 'otilde': '\xF5', 'Otilde': '\xD5', 'ouml': '\xF6', 'Ouml': '\xD6', 'para': '\xB6', 'plusmn': '\xB1', 'pound': '\xA3', 'quot': '"', 'QUOT': '"', 'raquo': '\xBB', 'reg': '\xAE', 'REG': '\xAE', 'sect': '\xA7', 'shy': '\xAD', 'sup1': '\xB9', 'sup2': '\xB2', 'sup3': '\xB3', 'szlig': '\xDF', 'thorn': '\xFE', 'THORN': '\xDE', 'times': '\xD7', 'uacute': '\xFA', 'Uacute': '\xDA', 'ucirc': '\xFB', 'Ucirc': '\xDB', 'ugrave': '\xF9', 'Ugrave': '\xD9', 'uml': '\xA8', 'uuml': '\xFC', 'Uuml': '\xDC', 'yacute': '\xFD', 'Yacute': '\xDD', 'yen': '\xA5', 'yuml': '\xFF' };
  	var decodeMapNumeric = { '0': '�', '128': '€', '130': '‚', '131': 'ƒ', '132': '„', '133': '…', '134': '†', '135': '‡', '136': 'ˆ', '137': '‰', '138': 'Š', '139': '‹', '140': 'Œ', '142': 'Ž', '145': '‘', '146': '’', '147': '“', '148': '”', '149': '•', '150': '–', '151': '—', '152': '˜', '153': '™', '154': 'š', '155': '›', '156': 'œ', '158': 'ž', '159': 'Ÿ' };
  	var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65000, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
  
  	/*--------------------------------------------------------------------------*/
  
  	var stringFromCharCode = String.fromCharCode;
  
  	var object = {};
  	var hasOwnProperty = object.hasOwnProperty;
  	var has = function has(object, propertyName) {
  		return hasOwnProperty.call(object, propertyName);
  	};
  
  	var contains = function contains(array, value) {
  		var index = -1;
  		var length = array.length;
  		while (++index < length) {
  			if (array[index] == value) {
  				return true;
  			}
  		}
  		return false;
  	};
  
  	var merge = function merge(options, defaults) {
  		if (!options) {
  			return defaults;
  		}
  		var result = {};
  		var key;
  		for (key in defaults) {
  			// A `hasOwnProperty` check is not needed here, since only recognized
  			// option names are used anyway. Any others are ignored.
  			result[key] = has(options, key) ? options[key] : defaults[key];
  		}
  		return result;
  	};
  
  	// Modified version of `ucs2encode`; see https://mths.be/punycode.
  	var codePointToSymbol = function codePointToSymbol(codePoint, strict) {
  		var output = '';
  		if (codePoint >= 0xD800 && codePoint <= 0xDFFF || codePoint > 0x10FFFF) {
  			// See issue #4:
  			// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
  			// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
  			// REPLACEMENT CHARACTER.”
  			if (strict) {
  				parseError('character reference outside the permissible Unicode range');
  			}
  			return '�';
  		}
  		if (has(decodeMapNumeric, codePoint)) {
  			if (strict) {
  				parseError('disallowed character reference');
  			}
  			return decodeMapNumeric[codePoint];
  		}
  		if (strict && contains(invalidReferenceCodePoints, codePoint)) {
  			parseError('disallowed character reference');
  		}
  		if (codePoint > 0xFFFF) {
  			codePoint -= 0x10000;
  			output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
  			codePoint = 0xDC00 | codePoint & 0x3FF;
  		}
  		output += stringFromCharCode(codePoint);
  		return output;
  	};
  
  	var hexEscape = function hexEscape(codePoint) {
  		return '&#x' + codePoint.toString(16).toUpperCase() + ';';
  	};
  
  	var decEscape = function decEscape(codePoint) {
  		return '&#' + codePoint + ';';
  	};
  
  	var parseError = function parseError(message) {
  		throw Error('Parse error: ' + message);
  	};
  
  	/*--------------------------------------------------------------------------*/
  
  	var encode = function encode(string, options) {
  		options = merge(options, encode.options);
  		var strict = options.strict;
  		if (strict && regexInvalidRawCodePoint.test(string)) {
  			parseError('forbidden code point');
  		}
  		var encodeEverything = options.encodeEverything;
  		var useNamedReferences = options.useNamedReferences;
  		var allowUnsafeSymbols = options.allowUnsafeSymbols;
  		var escapeCodePoint = options.decimal ? decEscape : hexEscape;
  
  		var escapeBmpSymbol = function escapeBmpSymbol(symbol) {
  			return escapeCodePoint(symbol.charCodeAt(0));
  		};
  
  		if (encodeEverything) {
  			// Encode ASCII symbols.
  			string = string.replace(regexAsciiWhitelist, function (symbol) {
  				// Use named references if requested & possible.
  				if (useNamedReferences && has(encodeMap, symbol)) {
  					return '&' + encodeMap[symbol] + ';';
  				}
  				return escapeBmpSymbol(symbol);
  			});
  			// Shorten a few escapes that represent two symbols, of which at least one
  			// is within the ASCII range.
  			if (useNamedReferences) {
  				string = string.replace(/&gt;\u20D2/g, '&nvgt;').replace(/&lt;\u20D2/g, '&nvlt;').replace(/&#x66;&#x6A;/g, '&fjlig;');
  			}
  			// Encode non-ASCII symbols.
  			if (useNamedReferences) {
  				// Encode non-ASCII symbols that can be replaced with a named reference.
  				string = string.replace(regexEncodeNonAscii, function (string) {
  					// Note: there is no need to check `has(encodeMap, string)` here.
  					return '&' + encodeMap[string] + ';';
  				});
  			}
  			// Note: any remaining non-ASCII symbols are handled outside of the `if`.
  		} else if (useNamedReferences) {
  				// Apply named character references.
  				// Encode `<>"'&` using named character references.
  				if (!allowUnsafeSymbols) {
  					string = string.replace(regexEscape, function (string) {
  						return '&' + encodeMap[string] + ';'; // no need to check `has()` here
  					});
  				}
  				// Shorten escapes that represent two symbols, of which at least one is
  				// `<>"'&`.
  				string = string.replace(/&gt;\u20D2/g, '&nvgt;').replace(/&lt;\u20D2/g, '&nvlt;');
  				// Encode non-ASCII symbols that can be replaced with a named reference.
  				string = string.replace(regexEncodeNonAscii, function (string) {
  					// Note: there is no need to check `has(encodeMap, string)` here.
  					return '&' + encodeMap[string] + ';';
  				});
  			} else if (!allowUnsafeSymbols) {
  				// Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
  				// using named character references.
  				string = string.replace(regexEscape, escapeBmpSymbol);
  			}
  		return string
  		// Encode astral symbols.
  		.replace(regexAstralSymbols, function ($0) {
  			// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
  			var high = $0.charCodeAt(0);
  			var low = $0.charCodeAt(1);
  			var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
  			return escapeCodePoint(codePoint);
  		})
  		// Encode any remaining BMP symbols that are not printable ASCII symbols
  		// using a hexadecimal escape.
  		.replace(regexBmpWhitelist, escapeBmpSymbol);
  	};
  	// Expose default options (so they can be overridden globally).
  	encode.options = {
  		'allowUnsafeSymbols': false,
  		'encodeEverything': false,
  		'strict': false,
  		'useNamedReferences': false,
  		'decimal': false
  	};
  
  	var decode = function decode(html, options) {
  		options = merge(options, decode.options);
  		var strict = options.strict;
  		if (strict && regexInvalidEntity.test(html)) {
  			parseError('malformed character reference');
  		}
  		return html.replace(regexDecode, function ($0, $1, $2, $3, $4, $5, $6, $7) {
  			var codePoint;
  			var semicolon;
  			var decDigits;
  			var hexDigits;
  			var reference;
  			var next;
  			if ($1) {
  				// Decode decimal escapes, e.g. `&#119558;`.
  				decDigits = $1;
  				semicolon = $2;
  				if (strict && !semicolon) {
  					parseError('character reference was not terminated by a semicolon');
  				}
  				codePoint = parseInt(decDigits, 10);
  				return codePointToSymbol(codePoint, strict);
  			}
  			if ($3) {
  				// Decode hexadecimal escapes, e.g. `&#x1D306;`.
  				hexDigits = $3;
  				semicolon = $4;
  				if (strict && !semicolon) {
  					parseError('character reference was not terminated by a semicolon');
  				}
  				codePoint = parseInt(hexDigits, 16);
  				return codePointToSymbol(codePoint, strict);
  			}
  			if ($5) {
  				// Decode named character references with trailing `;`, e.g. `&copy;`.
  				reference = $5;
  				if (has(decodeMap, reference)) {
  					return decodeMap[reference];
  				} else {
  					// Ambiguous ampersand. https://mths.be/notes/ambiguous-ampersands
  					if (strict) {
  						parseError('named character reference was not terminated by a semicolon');
  					}
  					return $0;
  				}
  			}
  			// If we’re still here, it’s a legacy reference for sure. No need for an
  			// extra `if` check.
  			// Decode named character references without trailing `;`, e.g. `&amp`
  			// This is only a parse error if it gets converted to `&`, or if it is
  			// followed by `=` in an attribute context.
  			reference = $6;
  			next = $7;
  			if (next && options.isAttributeValue) {
  				if (strict && next == '=') {
  					parseError('`&` did not start a character reference');
  				}
  				return $0;
  			} else {
  				if (strict) {
  					parseError('named character reference was not terminated by a semicolon');
  				}
  				// Note: there is no need to check `has(decodeMapLegacy, reference)`.
  				return decodeMapLegacy[reference] + (next || '');
  			}
  		});
  	};
  	// Expose default options (so they can be overridden globally).
  	decode.options = {
  		'isAttributeValue': false,
  		'strict': false
  	};
  
  	var escape = function escape(string) {
  		return string.replace(regexEscape, function ($0) {
  			// Note: there is no need to check `has(escapeMap, $0)` here.
  			return escapeMap[$0];
  		});
  	};
  
  	/*--------------------------------------------------------------------------*/
  
  	var he = {
  		'version': '1.1.0',
  		'encode': encode,
  		'decode': decode,
  		'escape': escape,
  		'unescape': decode
  	};
  
  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
  		define(function () {
  			return he;
  		});
  	} else if (freeExports && !freeExports.nodeType) {
  		if (freeModule) {
  			// in Node.js, io.js, or RingoJS v0.8.0+
  			freeModule.exports = he;
  		} else {
  			// in Narwhal or RingoJS v0.7.0-
  			for (var key in he) {
  				has(he, key) && (freeExports[key] = he[key]);
  			}
  		}
  	} else {
  		// in Rhino or a web browser
  		root.he = he;
  	}
  })(undefined);

});
