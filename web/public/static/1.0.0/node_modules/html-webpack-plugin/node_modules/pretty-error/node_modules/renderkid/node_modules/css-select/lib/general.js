define('html-webpack-plugin/node_modules/pretty-error/node_modules/renderkid/node_modules/css-select/lib/general', function(require, exports, module) {

  "use strict";
  
  var DomUtils = require("html-webpack-plugin/node_modules/pretty-error/node_modules/renderkid/node_modules/css-select/node_modules/domutils/index"),
      isTag = DomUtils.isTag,
      getParent = DomUtils.getParent,
      getChildren = DomUtils.getChildren,
      getSiblings = DomUtils.getSiblings,
      getName = DomUtils.getName;
  
  /*
  	all available rules
  */
  module.exports = {
  	__proto__: null,
  
  	attribute: require("html-webpack-plugin/node_modules/pretty-error/node_modules/renderkid/node_modules/css-select/lib/attributes").compile,
  	pseudo: require("html-webpack-plugin/node_modules/pretty-error/node_modules/renderkid/node_modules/css-select/lib/pseudos").compile,
  
  	//tags
  	tag: function tag(next, data) {
  		var name = data.name;
  		return function tag(elem) {
  			return getName(elem) === name && next(elem);
  		};
  	},
  
  	//traversal
  	descendant: function descendant(next, rule, options, context, acceptSelf) {
  		return function descendant(elem) {
  
  			if (acceptSelf && next(elem)) return true;
  
  			var found = false;
  
  			while (!found && (elem = getParent(elem))) {
  				found = next(elem);
  			}
  
  			return found;
  		};
  	},
  	parent: function parent(next, data, options) {
  		if (options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");
  
  		return function parent(elem) {
  			return getChildren(elem).some(test);
  		};
  
  		function test(elem) {
  			return isTag(elem) && next(elem);
  		}
  	},
  	child: function child(next) {
  		return function child(elem) {
  			var parent = getParent(elem);
  			return !!parent && next(parent);
  		};
  	},
  	sibling: function sibling(next) {
  		return function sibling(elem) {
  			var siblings = getSiblings(elem);
  
  			for (var i = 0; i < siblings.length; i++) {
  				if (isTag(siblings[i])) {
  					if (siblings[i] === elem) break;
  					if (next(siblings[i])) return true;
  				}
  			}
  
  			return false;
  		};
  	},
  	adjacent: function adjacent(next) {
  		return function adjacent(elem) {
  			var siblings = getSiblings(elem),
  			    lastElement;
  
  			for (var i = 0; i < siblings.length; i++) {
  				if (isTag(siblings[i])) {
  					if (siblings[i] === elem) break;
  					lastElement = siblings[i];
  				}
  			}
  
  			return !!lastElement && next(lastElement);
  		};
  	},
  	universal: function universal(next) {
  		return next;
  	}
  };

});
