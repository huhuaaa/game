define('webpack/lib/MultiCompiler', function(require, exports, module) {

  /*
  	MIT License http://www.opensource.org/licenses/mit-license.php
  	Author Tobias Koppers @sokra
  */
  "use strict";
  
  var Tapable = require("webpack/node_modules/tapable/lib/Tapable");
  var async = require("webpack/node_modules/async/lib/async");
  var Stats = require("webpack/lib/Stats");
  
  function MultiWatching(watchings) {
  	this.watchings = watchings;
  }
  
  MultiWatching.prototype.invalidate = function () {
  	this.watchings.forEach(function (watching) {
  		watching.invalidate();
  	});
  };
  
  MultiWatching.prototype.close = function (callback) {
  	async.forEach(this.watchings, function (watching, callback) {
  		watching.close(callback);
  	}, callback);
  };
  
  function MultiCompiler(compilers) {
  	Tapable.call(this);
  	if (!Array.isArray(compilers)) {
  		compilers = Object.keys(compilers).map(function (name) {
  			compilers[name].name = name;
  			return compilers[name];
  		});
  	}
  	this.compilers = compilers;
  
  	function delegateProperty(name) {
  		Object.defineProperty(this, name, {
  			configurable: false,
  			get: function get() {
  				throw new Error("Cannot read " + name + " of a MultiCompiler");
  			},
  			set: (function (value) {
  				this.compilers.forEach(function (compiler) {
  					compiler[name] = value;
  				});
  			}).bind(this)
  		});
  	}
  	delegateProperty.call(this, "outputFileSystem");
  	delegateProperty.call(this, "inputFileSystem");
  
  	Object.defineProperty(this, "outputPath", {
  		configurable: false,
  		get: function get() {
  			var commonPath = compilers[0].outputPath;
  			for (var i = 1; i < compilers.length; i++) {
  				while (compilers[i].outputPath.indexOf(commonPath) !== 0 && /[\/\\]/.test(commonPath)) {
  					commonPath = commonPath.replace(/[\/\\][^\/\\]*$/, "");
  				}
  			}
  			if (!commonPath && compilers[0].outputPath[0] === "/") return "/";
  			return commonPath;
  		}
  	});
  
  	var doneCompilers = 0;
  	var compilerStats = [];
  	this.compilers.forEach(function (compiler, idx) {
  		var compilerDone = false;
  		compiler.plugin("done", (function (stats) {
  			if (!compilerDone) {
  				compilerDone = true;
  				doneCompilers++;
  			}
  			compilerStats[idx] = stats;
  			if (doneCompilers === this.compilers.length) {
  				this.applyPlugins("done", new MultiStats(compilerStats));
  			}
  		}).bind(this));
  		compiler.plugin("invalid", (function () {
  			if (compilerDone) {
  				compilerDone = false;
  				doneCompilers--;
  			}
  			this.applyPlugins("invalid");
  		}).bind(this));
  	}, this);
  }
  module.exports = MultiCompiler;
  
  MultiCompiler.prototype = Object.create(Tapable.prototype);
  MultiCompiler.prototype.constructor = MultiCompiler;
  
  MultiCompiler.prototype.watch = function (watchDelay, handler) {
  	var watchings = this.compilers.map(function (compiler) {
  		return compiler.watch(watchDelay, handler);
  	});
  	return new MultiWatching(watchings);
  };
  
  MultiCompiler.prototype.run = function (callback) {
  	async.map(this.compilers, function (compiler, callback) {
  		compiler.run(callback);
  	}, function (err, stats) {
  		if (err) return callback(err);
  		callback(null, new MultiStats(stats));
  	});
  };
  
  MultiCompiler.prototype.purgeInputFileSystem = function () {
  	this.compilers.forEach(function (compiler) {
  		if (compiler.inputFileSystem && compiler.inputFileSystem.purge) compiler.inputFileSystem.purge();
  	});
  };
  
  function MultiStats(stats) {
  	this.stats = stats;
  	this.hash = stats.map(function (stat) {
  		return stat.hash;
  	}).join("");
  }
  
  MultiStats.prototype.hasErrors = function () {
  	return this.stats.map(function (stat) {
  		return stat.hasErrors();
  	}).reduce(function (a, b) {
  		return a || b;
  	}, false);
  };
  
  MultiStats.prototype.hasWarnings = function () {
  	return this.stats.map(function (stat) {
  		return stat.hasWarnings();
  	}).reduce(function (a, b) {
  		return a || b;
  	}, false);
  };
  
  MultiStats.prototype.toJson = function (options, forToString) {
  	var jsons = this.stats.map(function (stat) {
  		var obj = stat.toJson(options, forToString);
  		obj.name = stat.compilation && stat.compilation.name;
  		return obj;
  	});
  	var obj = {
  		errors: jsons.reduce(function (arr, j) {
  			return arr.concat(j.errors.map(function (msg) {
  				return "(" + j.name + ") " + msg;
  			}));
  		}, []),
  		warnings: jsons.reduce(function (arr, j) {
  			return arr.concat(j.warnings.map(function (msg) {
  				return "(" + j.name + ") " + msg;
  			}));
  		}, [])
  	};
  	if (!options || options.version !== false) obj.version = {
    "name": "webpack",
    "version": "1.13.3",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "Packs CommonJs/AMD modules for the browser. Allows to split your codebase into multiple bundles, which can be loaded on demand. Support loaders to preprocess files, i.e. json, jade, coffee, css, less, ... and your custom stuff.",
    "dependencies": {
      "async": "^1.3.0",
      "clone": "^1.0.2",
      "enhanced-resolve": "~0.9.0",
      "acorn": "^3.0.0",
      "interpret": "^0.6.4",
      "loader-utils": "^0.2.11",
      "memory-fs": "~0.3.0",
      "mkdirp": "~0.5.0",
      "node-libs-browser": "^0.6.0",
      "optimist": "~0.6.0",
      "supports-color": "^3.1.0",
      "tapable": "~0.1.8",
      "uglify-js": "~2.7.3",
      "watchpack": "^0.2.1",
      "webpack-core": "~0.6.0"
    },
    "license": "MIT",
    "devDependencies": {
      "benchmark": "^1.0.0",
      "bundle-loader": "~0.5.0",
      "codecov.io": "^0.1.2",
      "coffee-loader": "~0.7.1",
      "coffee-script": "^1.10.0",
      "component-webpack-plugin": "~0.2.0",
      "coveralls": "^2.11.2",
      "css-loader": "~0.15.0",
      "diff": "^2.0.2",
      "eslint": "^1.1.0",
      "eslint-plugin-nodeca": "^1.0.3",
      "express": "~4.13.1",
      "extract-text-webpack-plugin": "~0.8.0",
      "file-loader": "~0.8.0",
      "glob": "^5.0.14",
      "i18n-webpack-plugin": "~0.2.0",
      "istanbul": "^0.3.13",
      "jade": "^1.11.0",
      "jade-loader": "~0.7.0",
      "js-beautify": "^1.5.10",
      "json-loader": "~0.5.1",
      "less": "^2.5.1",
      "less-loader": "^2.0.0",
      "mocha": "~2.2.0",
      "mocha-lcov-reporter": "0.0.2",
      "raw-loader": "~0.5.0",
      "script-loader": "~0.6.0",
      "should": "^7.0.2",
      "style-loader": "~0.12.0",
      "url-loader": "~0.5.0",
      "val-loader": "~0.5.0",
      "vm-browserify": "~0.0.0",
      "webpack-dev-middleware": "^1.0.0",
      "worker-loader": "~0.6.0"
    },
    "engines": {
      "node": ">=0.6"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/webpack/webpack.git"
    },
    "homepage": "https://github.com/webpack/webpack",
    "main": "lib/webpack.js",
    "web": "lib/webpack.web.js",
    "bin": {
      "webpack": "./bin/webpack.js"
    },
    "files": [
      "lib/",
      "bin/",
      "buildin/",
      "hot/",
      "web_modules/"
    ],
    "scripts": {
      "pretest": "npm run lint && npm run beautify-lint",
      "test": "mocha",
      "travis": "npm run cover -- --report lcovonly",
      "lint": "eslint lib bin hot scripts",
      "beautify-lint": "node ./scripts/beautify-check",
      "beautify": "node ./scripts/beautify-rewrite",
      "precover": "npm run lint && npm run beautify-lint",
      "cover": "istanbul cover -x **/*.runtime.js node_modules/mocha/bin/_mocha",
      "publish-patch": "npm run lint && npm run beautify-lint && mocha && npm version patch && git push && git push --tags && npm publish"
    },
    "gitHead": "1a5fd7e8caeef794f67e56d9d734998209b0838c",
    "bugs": {
      "url": "https://github.com/webpack/webpack/issues"
    },
    "_id": "webpack@1.13.3",
    "_shasum": "e79c46fe5a37c5ca70084ba0894c595cdcb42815",
    "_from": "webpack@>=1.13.3 <2.0.0",
    "_npmVersion": "3.10.8",
    "_nodeVersion": "6.9.0",
    "_npmUser": {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    "dist": {
      "shasum": "e79c46fe5a37c5ca70084ba0894c595cdcb42815",
      "tarball": "https://registry.npmjs.org/webpack/-/webpack-1.13.3.tgz"
    },
    "maintainers": [
      {
        "name": "jhnns",
        "email": "mail@johannesewald.de"
      },
      {
        "name": "sokra",
        "email": "tobias.koppers@googlemail.com"
      },
      {
        "name": "thelarkinn",
        "email": "sean.larkin@cuw.edu"
      }
    ],
    "_npmOperationalInternal": {
      "host": "packages-18-east.internal.npmjs.com",
      "tmp": "tmp/webpack-1.13.3.tgz_1477491822577_0.763972872402519"
    },
    "directories": {},
    "_resolved": "https://registry.npmjs.org/webpack/-/webpack-1.13.3.tgz",
    "readme": "ERROR: No README data found!"
  }
  .version;
  	if (!options || options.hash !== false) obj.hash = this.hash;
  	if (!options || options.children !== false) obj.children = jsons;
  	return obj;
  };
  
  MultiStats.prototype.toString = Stats.prototype.toString;

});
