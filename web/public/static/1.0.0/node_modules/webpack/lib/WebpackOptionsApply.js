define('webpack/lib/WebpackOptionsApply', function(require, exports, module) {

  var process = require('webpack/node_modules/node-libs-browser/node_modules/process/browser');
  /*
  	MIT License http://www.opensource.org/licenses/mit-license.php
  	Author Tobias Koppers @sokra
  */
  "use strict";
  
  var OptionsApply = require("webpack/lib/OptionsApply");
  
  var LoaderTargetPlugin = require("webpack/lib/LoaderTargetPlugin");
  var FunctionModulePlugin = require("webpack/lib/FunctionModulePlugin");
  var EvalDevToolModulePlugin = require("webpack/lib/EvalDevToolModulePlugin");
  var SourceMapDevToolPlugin = require("webpack/lib/SourceMapDevToolPlugin");
  var EvalSourceMapDevToolPlugin = require("webpack/lib/EvalSourceMapDevToolPlugin");
  
  var EntryOptionPlugin = require("webpack/lib/EntryOptionPlugin");
  var RecordIdsPlugin = require("webpack/lib/RecordIdsPlugin");
  
  var APIPlugin = require("webpack/lib/APIPlugin");
  var ConstPlugin = require("webpack/lib/ConstPlugin");
  var RequireJsStuffPlugin = require("webpack/lib/RequireJsStuffPlugin");
  var NodeStuffPlugin = require("webpack/lib/NodeStuffPlugin");
  var CompatibilityPlugin = require("webpack/lib/CompatibilityPlugin");
  var DefinePlugin = require("webpack/lib/DefinePlugin");
  
  var MovedToPluginWarningPlugin = require("webpack/lib/MovedToPluginWarningPlugin");
  var TemplatedPathPlugin = require("webpack/lib/TemplatedPathPlugin");
  var WarnCaseSensitiveModulesPlugin = require("webpack/lib/WarnCaseSensitiveModulesPlugin");
  
  var LoaderPlugin = require("webpack/lib/dependencies/LoaderPlugin");
  var CommonJsPlugin = require("webpack/lib/dependencies/CommonJsPlugin");
  var AMDPlugin = require("webpack/lib/dependencies/AMDPlugin");
  var RequireContextPlugin = require("webpack/lib/dependencies/RequireContextPlugin");
  var RequireEnsurePlugin = require("webpack/lib/dependencies/RequireEnsurePlugin");
  var RequireIncludePlugin = require("webpack/lib/dependencies/RequireIncludePlugin");
  
  var RemoveParentModulesPlugin = require("webpack/lib/optimize/RemoveParentModulesPlugin");
  var RemoveEmptyChunksPlugin = require("webpack/lib/optimize/RemoveEmptyChunksPlugin");
  var MergeDuplicateChunksPlugin = require("webpack/lib/optimize/MergeDuplicateChunksPlugin");
  var FlagIncludedChunksPlugin = require("webpack/lib/optimize/FlagIncludedChunksPlugin");
  
  var UnsafeCachePlugin = require("webpack/node_modules/enhanced-resolve/lib/UnsafeCachePlugin");
  var ModulesInDirectoriesPlugin = require("webpack/node_modules/enhanced-resolve/lib/ModulesInDirectoriesPlugin");
  var ModulesInRootPlugin = require("webpack/node_modules/enhanced-resolve/lib/ModulesInRootPlugin");
  var ModuleTemplatesPlugin = require("webpack/node_modules/enhanced-resolve/lib/ModuleTemplatesPlugin");
  var ModuleAsFilePlugin = require("webpack/node_modules/enhanced-resolve/lib/ModuleAsFilePlugin");
  var ModuleAsDirectoryPlugin = require("webpack/node_modules/enhanced-resolve/lib/ModuleAsDirectoryPlugin");
  var ModuleAliasPlugin = require("webpack/node_modules/enhanced-resolve/lib/ModuleAliasPlugin");
  var DirectoryDefaultFilePlugin = require("webpack/node_modules/enhanced-resolve/lib/DirectoryDefaultFilePlugin");
  var DirectoryDescriptionFilePlugin = require("webpack/node_modules/enhanced-resolve/lib/DirectoryDescriptionFilePlugin");
  var DirectoryDescriptionFileFieldAliasPlugin = require("webpack/node_modules/enhanced-resolve/lib/DirectoryDescriptionFileFieldAliasPlugin");
  var FileAppendPlugin = require("webpack/node_modules/enhanced-resolve/lib/FileAppendPlugin");
  var DirectoryResultPlugin = require("webpack/node_modules/enhanced-resolve/lib/DirectoryResultPlugin");
  var ResultSymlinkPlugin = require("webpack/node_modules/enhanced-resolve/lib/ResultSymlinkPlugin");
  
  function WebpackOptionsApply() {
  	OptionsApply.call(this);
  }
  module.exports = WebpackOptionsApply;
  
  WebpackOptionsApply.prototype = Object.create(OptionsApply.prototype);
  WebpackOptionsApply.prototype.process = function (options, compiler) {
  	compiler.context = options.context;
  	if (options.plugins && Array.isArray(options.plugins)) {
  		compiler.apply.apply(compiler, options.plugins);
  	}
  	compiler.outputPath = options.output.path;
  	compiler.recordsInputPath = options.recordsInputPath || options.recordsPath;
  	compiler.recordsOutputPath = options.recordsOutputPath || options.recordsPath;
  	compiler.name = options.name;
  	if (typeof options.target === "string") {
  		switch (options.target) {
  			case "web":
  				var JsonpTemplatePlugin = require("webpack/lib/JsonpTemplatePlugin");
  				var NodeSourcePlugin = require("webpack/lib/node/NodeSourcePlugin");
  				compiler.apply(new JsonpTemplatePlugin(options.output), new FunctionModulePlugin(options.output), new NodeSourcePlugin(options.node), new LoaderTargetPlugin("web"));
  				break;
  			case "webworker":
  				var WebWorkerTemplatePlugin = require("webpack/lib/webworker/WebWorkerTemplatePlugin");
  				var NodeSourcePlugin = require("webpack/lib/node/NodeSourcePlugin");
  				compiler.apply(new WebWorkerTemplatePlugin(options.output), new FunctionModulePlugin(options.output), new NodeSourcePlugin(options.node), new LoaderTargetPlugin("webworker"));
  				break;
  			case "node":
  			case "async-node":
  				var NodeTemplatePlugin = require("webpack/lib/node/NodeTemplatePlugin");
  				var NodeTargetPlugin = require("webpack/lib/node/NodeTargetPlugin");
  				compiler.apply(new NodeTemplatePlugin(options.output, options.target === "async-node"), new FunctionModulePlugin(options.output), new NodeTargetPlugin(), new LoaderTargetPlugin("node"));
  				break;
  			case "node-webkit":
  				var JsonpTemplatePlugin = require("webpack/lib/JsonpTemplatePlugin");
  				var NodeTargetPlugin = require("webpack/lib/node/NodeTargetPlugin");
  				var ExternalsPlugin = require("webpack/lib/ExternalsPlugin");
  				compiler.apply(new JsonpTemplatePlugin(options.output), new FunctionModulePlugin(options.output), new NodeTargetPlugin(), new ExternalsPlugin("commonjs", "nw.gui"), new LoaderTargetPlugin("node-webkit"));
  				break;
  			case "atom":
  			case "electron":
  			case "electron-main":
  				var NodeTemplatePlugin = require("webpack/lib/node/NodeTemplatePlugin");
  				var NodeTargetPlugin = require("webpack/lib/node/NodeTargetPlugin");
  				var ExternalsPlugin = require("webpack/lib/ExternalsPlugin");
  				compiler.apply(new NodeTemplatePlugin(options.output, true), new FunctionModulePlugin(options.output), new NodeTargetPlugin(), new ExternalsPlugin("commonjs", ["app", "auto-updater", "browser-window", "content-tracing", "dialog", "electron", "global-shortcut", "ipc", "ipc-main", "menu", "menu-item", "power-monitor", "power-save-blocker", "protocol", "session", "web-contents", "tray", "clipboard", "crash-reporter", "native-image", "screen", "shell"]), new LoaderTargetPlugin(options.target));
  				break;
  			case "electron-renderer":
  				var JsonpTemplatePlugin = require("webpack/lib/JsonpTemplatePlugin");
  				var NodeTargetPlugin = require("webpack/lib/node/NodeTargetPlugin");
  				var ExternalsPlugin = require("webpack/lib/ExternalsPlugin");
  				compiler.apply(new JsonpTemplatePlugin(options.output), new FunctionModulePlugin(options.output), new NodeTargetPlugin(), new ExternalsPlugin("commonjs", ["desktop-capturer", "electron", "ipc", "ipc-renderer", "remote", "web-frame", "clipboard", "crash-reporter", "native-image", "screen", "shell"]), new LoaderTargetPlugin(options.target));
  				break;
  			default:
  				throw new Error("Unsupported target '" + options.target + "'.");
  		}
  	} else if (options.target !== false) {
  		options.target(compiler);
  	} else {
  		throw new Error("Unsupported target '" + options.target + "'.");
  	}
  	if (options.output.library || options.output.libraryTarget !== "var") {
  		var LibraryTemplatePlugin = require("webpack/lib/LibraryTemplatePlugin");
  		compiler.apply(new LibraryTemplatePlugin(options.output.library, options.output.libraryTarget, options.output.umdNamedDefine));
  	}
  	if (options.externals) {
  		var ExternalsPlugin = require("webpack/lib/ExternalsPlugin");
  		compiler.apply(new ExternalsPlugin(options.output.libraryTarget, options.externals));
  	}
  
  	if (options.hot) {
  		compiler.apply(new MovedToPluginWarningPlugin("hot", "HotModuleReplacementPlugin"));
  		var HotModuleReplacementPlugin = require("webpack/lib/HotModuleReplacementPlugin");
  		compiler.apply(new HotModuleReplacementPlugin(options.output));
  	}
  
  	if (options.devtool && (options.devtool.indexOf("sourcemap") >= 0 || options.devtool.indexOf("source-map") >= 0)) {
  		var hidden = options.devtool.indexOf("hidden") >= 0;
  		var inline = options.devtool.indexOf("inline") >= 0;
  		var evalWrapped = options.devtool.indexOf("eval") >= 0;
  		var cheap = options.devtool.indexOf("cheap") >= 0;
  		var moduleMaps = options.devtool.indexOf("module") >= 0;
  		var noSources = options.devtool.indexOf("nosources") >= 0;
  		var legacy = options.devtool.indexOf("@") >= 0;
  		var modern = options.devtool.indexOf("#") >= 0;
  		var comment = legacy && modern ? "\n/*\n//@ sourceMappingURL=[url]\n//# sourceMappingURL=[url]\n*/" : legacy ? "\n/*\n//@ sourceMappingURL=[url]\n*/" : modern ? "\n//# sourceMappingURL=[url]" : null;
  		var Plugin = evalWrapped ? EvalSourceMapDevToolPlugin : SourceMapDevToolPlugin;
  		compiler.apply(new Plugin({
  			filename: inline ? null : options.output.sourceMapFilename,
  			moduleFilenameTemplate: options.output.devtoolModuleFilenameTemplate,
  			fallbackModuleFilenameTemplate: options.output.devtoolFallbackModuleFilenameTemplate,
  			append: hidden ? false : comment,
  			module: moduleMaps ? true : cheap ? false : true,
  			columns: cheap ? false : true,
  			lineToLine: options.output.devtoolLineToLine,
  			noSources: noSources
  		}));
  	} else if (options.devtool && options.devtool.indexOf("eval") >= 0) {
  		var legacy = options.devtool.indexOf("@") >= 0;
  		var modern = options.devtool.indexOf("#") >= 0;
  		var comment = legacy && modern ? "//@ sourceURL=[url]\n//# sourceURL=[url]" : legacy ? "//@ sourceURL=[url]" : modern ? "//# sourceURL=[url]" : null;
  		compiler.apply(new EvalDevToolModulePlugin(comment, options.output.devtoolModuleFilenameTemplate));
  	}
  
  	compiler.apply(new EntryOptionPlugin());
  	compiler.applyPluginsBailResult("entry-option", options.context, options.entry);
  
  	if (options.prefetch) {
  		compiler.apply(new MovedToPluginWarningPlugin("prefetch", "PrefetchPlugin"));
  		var PrefetchPlugin = require("webpack/lib/PrefetchPlugin");
  		options.prefetch.map(function (request) {
  			compiler.apply(new PrefetchPlugin(options.context, request));
  		});
  	}
  	compiler.apply(new CompatibilityPlugin(), new LoaderPlugin(), new NodeStuffPlugin(options.node), new RequireJsStuffPlugin(), new APIPlugin(), new ConstPlugin(), new RequireIncludePlugin(), new RequireEnsurePlugin(), new RequireContextPlugin(options.resolve.modulesDirectories, options.resolve.extensions), new AMDPlugin(options.module, options.amd || {}), new CommonJsPlugin(options.module));
  
  	compiler.apply(new RemoveParentModulesPlugin(), new RemoveEmptyChunksPlugin(), new MergeDuplicateChunksPlugin(), new FlagIncludedChunksPlugin());
  
  	compiler.apply(new TemplatedPathPlugin());
  
  	compiler.apply(new RecordIdsPlugin());
  
  	compiler.apply(new WarnCaseSensitiveModulesPlugin());
  
  	if (options.optimize && options.optimize.occurenceOrder) {
  		compiler.apply(new MovedToPluginWarningPlugin("optimize.occurenceOrder", "optimize.OccurrenceOrderPlugin"));
  		var OccurrenceOrderPlugin = require("webpack/lib/optimize/OccurrenceOrderPlugin");
  		compiler.apply(new OccurrenceOrderPlugin(options.optimize.occurenceOrderPreferEntry));
  	}
  
  	if (options.optimize && options.optimize.minChunkSize) {
  		compiler.apply(new MovedToPluginWarningPlugin("optimize.minChunkSize", "optimize.MinChunkSizePlugin"));
  		var MinChunkSizePlugin = require("webpack/lib/optimize/MinChunkSizePlugin");
  		compiler.apply(new MinChunkSizePlugin(options.optimize));
  	}
  
  	if (options.optimize && options.optimize.maxChunks) {
  		compiler.apply(new MovedToPluginWarningPlugin("optimize.maxChunks", "optimize.LimitChunkCountPlugin"));
  		var LimitChunkCountPlugin = require("webpack/lib/optimize/LimitChunkCountPlugin");
  		compiler.apply(new LimitChunkCountPlugin(options.optimize));
  	}
  
  	if (options.optimize.minimize) {
  		compiler.apply(new MovedToPluginWarningPlugin("optimize.minimize", "optimize.UglifyJsPlugin"));
  		var UglifyJsPlugin = require("webpack/lib/optimize/UglifyJsPlugin");
  		if (options.optimize.minimize === true) compiler.apply(new UglifyJsPlugin());else compiler.apply(new UglifyJsPlugin(options.optimize.minimize));
  	}
  
  	if (options.cache === undefined ? options.watch : options.cache) {
  		var CachePlugin = require("webpack/lib/CachePlugin");
  		compiler.apply(new CachePlugin(typeof options.cache === "object" ? options.cache : null));
  	}
  
  	if (typeof options.provide === "object") {
  		compiler.apply(new MovedToPluginWarningPlugin("provide", "ProvidePlugin"));
  		var ProvidePlugin = require("webpack/lib/ProvidePlugin");
  		compiler.apply(new ProvidePlugin(options.provide));
  	}
  
  	if (options.define) {
  		compiler.apply(new MovedToPluginWarningPlugin("define", "DefinePlugin"));
  		var defineObject = {};
  		if (typeof options.define === "object") {
  			Object.keys(options.define).forEach(function (key) {
  				defineObject[key] = options.define[key];
  			});
  		}
  		compiler.apply(new DefinePlugin(defineObject));
  	}
  	if (options.defineDebug !== false) compiler.apply(new DefinePlugin({
  		DEBUG: !!options.debug
  	}));
  
  	compiler.applyPlugins("after-plugins", compiler);
  	compiler.resolvers.normal.apply(new UnsafeCachePlugin(options.resolve.unsafeCache), options.resolve.packageAlias ? new DirectoryDescriptionFileFieldAliasPlugin("package.json", options.resolve.packageAlias) : function () {}, new ModuleAliasPlugin(options.resolve.alias), makeRootPlugin("module", options.resolve.root), new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories), makeRootPlugin("module", options.resolve.fallback), new ModuleAsFilePlugin("module"), new ModuleAsDirectoryPlugin("module"), new DirectoryDescriptionFilePlugin("package.json", options.resolve.packageMains), new DirectoryDefaultFilePlugin(["index"]), new FileAppendPlugin(options.resolve.extensions), new ResultSymlinkPlugin());
  	compiler.resolvers.context.apply(new UnsafeCachePlugin(options.resolve.unsafeCache), new ModuleAliasPlugin(options.resolve.alias), makeRootPlugin("module", options.resolve.root), new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories), makeRootPlugin("module", options.resolve.fallback), new ModuleAsFilePlugin("module"), new ModuleAsDirectoryPlugin("module"), new DirectoryResultPlugin(), new ResultSymlinkPlugin());
  	compiler.resolvers.loader.apply(new UnsafeCachePlugin(options.resolve.unsafeCache), new ModuleAliasPlugin(options.resolveLoader.alias), makeRootPlugin("loader-module", options.resolveLoader.root), new ModulesInDirectoriesPlugin("loader-module", options.resolveLoader.modulesDirectories), makeRootPlugin("loader-module", options.resolveLoader.fallback), new ModuleTemplatesPlugin("loader-module", options.resolveLoader.moduleTemplates, "module"), new ModuleAsFilePlugin("module"), new ModuleAsDirectoryPlugin("module"), new DirectoryDescriptionFilePlugin("package.json", options.resolveLoader.packageMains), new DirectoryDefaultFilePlugin(["index"]), new FileAppendPlugin(options.resolveLoader.extensions), new ResultSymlinkPlugin());
  	compiler.applyPlugins("after-resolvers", compiler);
  	return options;
  };
  
  function makeRootPlugin(name, root) {
  	if (typeof root === "string") return new ModulesInRootPlugin(name, root);else if (Array.isArray(root)) {
  		return function () {
  			root.forEach(function (root) {
  				this.apply(new ModulesInRootPlugin(name, root));
  			}, this);
  		};
  	}
  	return function () {};
  }

});
