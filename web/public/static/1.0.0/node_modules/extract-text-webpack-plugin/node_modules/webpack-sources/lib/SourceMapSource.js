define('extract-text-webpack-plugin/node_modules/webpack-sources/lib/SourceMapSource', function(require, exports, module) {

  /*
  	MIT License http://www.opensource.org/licenses/mit-license.php
  	Author Tobias Koppers @sokra
  */
  "use strict";
  
  var SourceNode = require("babel-core/node_modules/source-map/source-map").SourceNode;
  var SourceMapConsumer = require("babel-core/node_modules/source-map/source-map").SourceMapConsumer;
  var SourceMapGenerator = require("babel-core/node_modules/source-map/source-map").SourceMapGenerator;
  var SourceListMap = require("css-loader/node_modules/source-list-map/lib/index").SourceListMap;
  var fromStringWithSourceMap = require("css-loader/node_modules/source-list-map/lib/index").fromStringWithSourceMap;
  var Source = require("extract-text-webpack-plugin/node_modules/webpack-sources/lib/Source");
  
  function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {
  	Source.call(this);
  	this._value = value;
  	this._name = name;
  	this._sourceMap = sourceMap;
  	this._originalSource = originalSource;
  	this._innerSourceMap = innerSourceMap;
  }
  module.exports = SourceMapSource;
  
  SourceMapSource.prototype = Object.create(Source.prototype);
  SourceMapSource.prototype.constructor = SourceMapSource;
  
  SourceMapSource.prototype.source = function () {
  	return this._value;
  };
  
  require("extract-text-webpack-plugin/node_modules/webpack-sources/lib/SourceAndMapMixin")(SourceMapSource.prototype);
  
  SourceMapSource.prototype.node = function (options) {
  	var innerSourceMap = this._innerSourceMap;
  	var sourceMap = this._sourceMap;
  	if (innerSourceMap) {
  		sourceMap = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));
  		if (this._originalSource) sourceMap.setSourceContent(this._name, this._originalSource);
  		innerSourceMap = new SourceMapConsumer(innerSourceMap);
  		sourceMap.applySourceMap(innerSourceMap, this._name);
  		sourceMap = sourceMap.toJSON();
  	}
  	return SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));
  };
  
  SourceMapSource.prototype.listMap = function (options) {
  	if (options.module === false) return new SourceListMap(this._value, this._name, this._value);
  	return fromStringWithSourceMap(this._value, typeof this._sourceMap === "string" ? JSON.parse(this._sourceMap) : this._sourceMap);
  };
  
  SourceMapSource.prototype.updateHash = function (hash) {
  	hash.update(this._value);
  	if (this._originalSource) hash.update(this._originalSource);
  };

});
